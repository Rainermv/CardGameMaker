//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.544
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

namespace CGME
{
	[Serializable]
	public abstract class Actor : ResourceableObject
	{
		// PRIVATE ----------------------------------------------
		public List<ResourceableObject> extensions = new List<ResourceableObject>();
		
//		protected Actor parent;
//		
//		public Actor Parent{
//			get {return parent;}
//			set {parent = value;}
//		}

		public override void Destroy(){
			base.Destroy();
			
			foreach (ResourceableObject ext in extensions){
				ext.Destroy ();
				
			}
			
		}
		
		public abstract CGObject AddChild(CGObject child);
		public abstract void RemoveChild(CGObject child);
		
		public Actor AddExtension(Actor extension){
			DispatchEvent(EngineEvent.AddExtension, extension, null);
			extensions.Add(extension);
			extension.parent = this;
			return extension;
		}
		
		public void RemoveExtension(Actor extension){
			extensions.Remove(extension);
			DispatchEvent(EngineEvent.RemoveExtension, extension, null);
		
		}
		
		public virtual void Shuffle(){
			return;
		}
		
		public override void Enable(bool enable){
		
			this.enabled = 	 enable;
			EnableResources (enable);
			EnableExtensions(enable);
			EnableChildren	(enable);

		}
		
		public void ClearExtensions(){
			extensions.Clear();
		}
		
		public void EnableExtensions(bool enable){
			foreach (ResourceableObject extension in extensions)
			extension.Enable(enable);
		}
		
		public abstract void EnableChildren(bool enable);
		
		public CGObject FindExtension(string name){
			foreach (CGObject extension in extensions){
				CGObject found = extension.FindObject (name);
				if (found != null)	return found;
			}
			return null	;
		}
		
		public CGObject FindExtension(int id){
			foreach (CGObject extension in extensions){
				CGObject found = extension.FindObject (id);
				if (found != null)	return found;
			}		
			return null;
		}
		
		//public override void Enable(bool enable){
			
		public override CGObject FindObject(string actor_name){
			// find self
			if (this.CGType == actor_name) return this;
			
			CGObject found;
			
			// find resources
			found = FindResource(actor_name);
			if (found != null) return found;
			
			// find extensions
			found = FindExtension(actor_name);
			if (found != null) return found;
			
			// find children
			found = FindChildren(actor_name);
			if (found != null) return found;
			
			return null;
		}
		
		public abstract CGObject FindChildren(string actor_name);
		
		public override CGObject FindObject(int id){
			// find self
			if (this.Id == id) return this;
			
			CGObject found;
			
			// find resources
			found = FindResource(id);
			if (found != null) return found;
			
			// find extensions
			found = FindExtension(id);
			if (found != null) return found;
			
			// find children
			found = FindChildren(id);
			if (found != null) return found;
			
			return null;
		
		}
		
		public abstract CGObject FindChildren(int id);
		
		public void StartExtensions(){
			foreach (CGObject obj in extensions) obj.Start ();
		}
		
		public override void Start(){
			SetId();
			StartResources ();
			StartExtensions ();
			StartChildren ();
		}
		
		public abstract void StartChildren();
		
		public virtual Actor GetChild(int index){
			return null;
		}
	}
}

