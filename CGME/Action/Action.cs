//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.18408
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;
using System;

namespace CGME
{	

	public abstract class Action : CGObject
	{
			
		protected bool armed = true;
		protected bool persistent = false;
		
		public Action ParentAction = null;
		
		public bool IsArmed{get{return armed;}}
		
		public GameManager manager;

		public Action(string type){
			this.CGType = type;
			persistent = false;
		}

		public bool Persistent{
			get{return persistent;}
			set{persistent = value;}
		} 

		
		public virtual void CopyFrom(Action copy){
			
			//this.Parent = copy.Parent;
			this.persistent = copy.persistent;
			this.cgtype = copy.cgtype;
			this.enabled = true;
			
			//GameManager.DebugLog("Copying " + this.cgtype);
		
		}
		
		public bool Run(CGObject s, Actor p1, Actor p2){

			manager = GameManager.GetInstance();
			
			GameManager.DebugLog("Running Action: " + this.cgtype + " :: Armed: " + armed + ":: Enabled: " + Enabled);;
	
			if (Enabled && armed){
			
				if (!persistent)
					Disarm ();
							
				return (Effect(s, p1, p2));
			}
			
			return false;
		}
		
		public void Arm(){
			if (ParentAction == null){
				//GameManager.DebugLog("Arming " + this.cgtype);
				armed = true;
				}
		}
		public void Disarm(){
			if (ParentAction == null){
				//GameManager.DebugLog("Disarming " + this.cgtype);
				armed = false;
				}
		}
		public abstract bool Effect(CGObject s, Actor p1, Actor p2);
		
//		public override void EnableChildren(bool enable){
//			return;
//		}
//		
//		public override CGObject FindChildren(string name){
//			
//			return null;
//		}
//		
//		public override CGObject FindChildren(int id){
//			
//			return null;
//		}
		
		public override void Start(){
			SetId ();
		}
		
		
		
		
		public override void SaveParameters(System.IO.BinaryWriter writer){
			base.SaveParameters(writer);
			
		//	Log.Print(this,"Saving stuff");
			writer.Write (persistent);
			//writer.Write(trigger.ToString());
		}	
		
		public override void LoadParameters(System.IO.BinaryReader reader){
			base.LoadParameters(reader);
			
		//	Log.Print(this,"loading stuff");
			persistent = reader.ReadBoolean();
			//trigger = (CGME.InterfaceEvent)Enum.Parse(typeof(InterfaceEvent),reader.ReadString());
		}
		
		public Action FindRoot(){
			if (ParentAction == null){
				Log.Print(this, "Parent - null");
				return this;
			}
			
			Log.Print(this, "Parent - " + ParentAction.cgtype) ;
			return ParentAction.FindRoot ();
			
		}
		
		protected CGObject GetFromSource(SelectionSource source, string t, CGObject s, Actor p1, Actor p2){
			
			switch (source){
				
			case (SelectionSource.Original):
				return s;
				
			case (SelectionSource.Selected):
				return p1;
				
			case (SelectionSource.Type):
				return (manager.CommandFindObject(t));
				
			}
			
			return null;
			
		}
			
		
//		public override void StartChildren(){
//			return;
//		}
		//public abstract void Enable(bool enabled);
		
		
	}
	

	
	
}

