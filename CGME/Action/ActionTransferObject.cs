//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.18444
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
namespace CGME
{
	public class ActionTransferObject : Action
	{
		//Actor target;
		private SelectionSource source;
		private string source_string;
		private SelectionSource destination;
		private string dest_string;
		
		public ActionTransferObject() : base("Transfer Object"){
		
			source = SelectionSource.Original;
			destination = SelectionSource.Selected;
			
			source_string = "Object Type";
			dest_string = "Destination Type";
		
		}
		
		public SelectionSource Source{
			get {return source;}
			set {source = value;}
		}
		
		public SelectionSource Destination{
			get {return destination;}
			set {destination = value;}
		}
		
		public string SourceString{
			get{return source_string;}
			set {source_string = value;}
		}
		
		public string DestinationString{
			get{return dest_string;}
			set {dest_string = value;}
		}
		
		public override bool Effect(CGObject s, Actor p1, Actor p2){

			CGObject source_obj = GetFromSource(source, source_string, s, p1, p2);
			CGObject dest_obj = GetFromSource(destination, dest_string, s, p1, p2);

			if (source_obj != null && dest_obj != null){
			
				GameManager.DebugLog("Transfering " + source_obj.CGType + " to " + dest_obj.CGType);
				
				if (manager.CommandTransferObject(source_obj as Actor,dest_obj as Actor) == true)
					return true;
		
			}
			
			GameManager.DebugLog("Transfer Action Failed");	
			return false;
		}
		
		CGObject GetFromSource(SelectionSource source, string t, CGObject s, Actor p1, Actor p2){
			
			switch (source){
			
				case (SelectionSource.Original):
					return s;
					
				case (SelectionSource.Selected):
					return p1;
				
				case (SelectionSource.Type):
					return (manager.CommandFindObject(t));
			
			}
			
			return null;
		
		
		}
		
		public override void SaveParameters(System.IO.BinaryWriter writer){
			base.SaveParameters(writer);
			
			writer.Write((Int32)source);
			writer.Write((Int32)destination);
			
			writer.Write (source_string);
			writer.Write (dest_string);
		}	
		
		public override void LoadParameters(System.IO.BinaryReader reader){
			base.LoadParameters(reader);
			
			source = (SelectionSource)reader.ReadInt32();
			destination = (SelectionSource)reader.ReadInt32();
			
			source_string = reader.ReadString ();
			dest_string = reader.ReadString ();
			
			//trigger = (CGME.InterfaceEvent)Enum.Parse(typeof(InterfaceEvent),reader.ReadString());
		}
		
		public override void CopyFrom(Action copy){
			
			base.CopyFrom(copy);
			
			source = (copy as ActionTransferObject).source;
			destination = (copy as ActionTransferObject).destination;
			
			source_string = (copy as ActionTransferObject).source_string;
			dest_string = (copy as ActionTransferObject).dest_string;
			
			//GameManager.DebugLog("Copying " + this.cgtype);
			
		}
				
		
	}
}

