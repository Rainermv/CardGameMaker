//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.18408
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;

namespace CGME
{
	[Serializable]
	public class ActionGroup : Action
	{	
		public ActionGroup(string t) : base(t){
			
		}
		
		public ActionGroup() : base("Action Group"){
			
		}

		
		protected List<Action> children = new List<Action>();
		
		// GET/SET FUNCIONS -----------------------------------------
	
		public CGME.Action GetAction(CGME.Action _action)
		{
			foreach (Action action in children) {
				if (action == _action)
					return action;
			}
			return null;
		}
		
		public CGME.Action GetCard(string name)
		{
			foreach (Action action in children) {
				if (action.CGType == name)
					return action;
			}
			return null;
		}
		
		public Action GetAction(int index){
			return children[index];
		}
		
		public int Actions_Size{
			get { return children.Count;}
		}
		
		public List<Action> Children{
			get{return children;}
			set{children = value;}
		}
		
		// LIST FUNCTIONS ------------------------------------------
		
		public Action AddAction(CGME.Action action){
			children.Add(action);
			action.ParentAction = this;
			return action;
		}
		
		public void RemoveAction(int index){
			children.RemoveAt(index);
		}
		
		public void RemoveAction(CGME.Action action){
			children.Remove(action);
		}
		
		public void ClearActions(){
			children.Clear();
		}
		
		// 	PUBLIC FUNCTIONS
		
		public override bool Effect(CGObject s, Actor p1, Actor p2){
		
			bool all_true = true;
				
			foreach(Action action in children){
				if (action.Run (s, p1, p2) == false)
					all_true = false;
			}
			
			return all_true;
		}
		
		public override void Enable(bool enable){
			
			this.enabled = enable;
			
			//EnableResources(enable);
			
			foreach (Action action in children){
				action.Enable(enable);
			}
			
		}
		
		public override void ClearChildren(){
		
			foreach(Action child in Children){
				child.ClearChildren();
			}
		
			Children.Clear();
		}
		public override void CleanupChildren(){
		
			foreach(Action child in Children){
				child.CleanupChildren();
			}
		
			for (int i = 0; i < children.Count; i++){
				if (children[i].DestroyFlag){
					children.RemoveAt(i);
					break;
				}
			}
		}
		
		public override void CopyFrom(Action copy){
			
			base.CopyFrom(copy);
			
			ActionGroup copyGroup = copy as ActionGroup	;		
			
			foreach (Action copying_child in copyGroup.Children){
				
				Action child = CGFactory.CreateCGInstance(copying_child.GetType().ToString()) as CGME.Action;
				
				child.CopyFrom (copying_child);
				
				this.AddAction(child);
				//copied_children.CopyFrom
				
			}
			
		}
		
//		public override void Arm(){
//			this.armed = true;
//			foreach(Action action in children){
//				action.Arm ();
//			}
//		}
		
//		public override void Disarm(){
//			this.armed = false;
//			foreach(Action action in children){
//				action.Disarm ();
//			}
//		}
		
	}
}

