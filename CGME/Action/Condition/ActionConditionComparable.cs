//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.18444
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
namespace CGME
{
	
	public abstract class ActionConditionComparable : Action
	{
		private SelectionSource[] objects = new SelectionSource[2];
		public SelectionSource[] Objects{
			get {return objects;}
			set {objects = value;}
		}
		
		private string[] object_strings = new string[2];
		public string[] ObjectStrings{
			get {return object_strings;}
			set {object_strings = value;}
		}
			
		public ActionConditionComparable (string t) : base(t)
		{
			objects[0] = SelectionSource.Original;
			objects[1] = SelectionSource.Original;
			object_strings[0] = "object type";
			object_strings[1] = "object type";
		}
		
		protected CGObject GetObject (int index, CGObject s, Actor p1, Actor p2 ){
			
			CGObject return_value = null;
			
			switch (objects[index]){
				
			case SelectionSource.Original: return_value = s; break ;
			case SelectionSource.Selected: return_value = p1; break ;
			case SelectionSource.Type:	   return_value = manager.CommandFindObject(object_strings[index]); break ;
				
			}
			
			if (return_value == null)
				Log.Warning(this,"Object not found or invalid");
			
			return return_value;
			
		}
		
		protected Actor GetActor (int index, CGObject s, Actor p1, Actor p2 ){
		
			return CastToActor (GetObject(index,s,p1,p2));
		
		}
		
		protected Actor CastToActor (CGObject obj){
			if (obj is Actor)
				return (obj as Actor);
			
			Log.Warning(this,"Object is not an Actor");
			return null;
		}
		
			
		public override void SaveParameters(System.IO.BinaryWriter writer){
			base.SaveParameters(writer);
			
			writer.Write((Int32)objects[0]);
			writer.Write((Int32)objects[1]);
			writer.Write (object_strings[0]);
			writer.Write (object_strings[1]);
		}	
		
		public override void LoadParameters(System.IO.BinaryReader reader){
			base.LoadParameters(reader);
			
			objects[0] = (SelectionSource)reader.ReadInt32();
			objects[1] = (SelectionSource)reader.ReadInt32();
			object_strings[0] = reader.ReadString();
			object_strings[1] = reader.ReadString();
		}
		
		public override void CopyFrom(Action copy){
			base.CopyFrom(copy);
			
			objects[0] = (copy as ActionConditionComparable).objects[0];		
			objects[1] = (copy as ActionConditionComparable).objects[1];	
			object_strings[0] = (copy as ActionConditionComparable).object_strings[0];		
			object_strings[1] = (copy as ActionConditionComparable).object_strings[1];	
		}
	}
}

