//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.18444
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
namespace CGME
{
	
	public class ActionSelect : ActionGroup
	{
	
		public ActionSelect() : base("Select Object From Scene"){
		
			target_cgtype = "type";
			source_cgtype = "type";
			target_index = 0;
			
			selection_source = SelectionSource.Original;
			selection_mode = SelectionMode.Index;
		
		}		
		
		protected SelectionSource selection_source;
		protected SelectionMode selection_mode;
		
		protected string source_cgtype;
		protected string target_cgtype;
		protected int target_index;
		
		public SelectionSource Source{
			get{return selection_source;}
			set{selection_source = value;}
		}
		
		public SelectionMode Mode{
			get{return selection_mode;}
			set{selection_mode = value;}
		}
		
		public string SourceCGType{
			get{return source_cgtype;}
			set{source_cgtype = value;}
		}
		
		public string TargetCGType{
			get{return target_cgtype;}
			set{target_cgtype = value;}
		}
		
		public int TargetIndex{
			get{return target_index;}
			set{target_index = value;}
		}
		
		public override bool Effect (CGObject s, Actor p1, Actor p2)
		{
			Actor parent = null;
			switch (Source){
			
			case SelectionSource.Original: 
				parent = p1; 
				break;
				
			case SelectionSource.Type:
				CGObject p = manager.CommandFindObject(source_cgtype); 
				if (p is Actor)
					parent = p as Actor;
				else 
					return false;
				break;
				
			default: 
				parent = null; 
				return false;
			}
			
			if (parent == null) return false;
			
			Actor Target = null;
			switch (Mode){
				case SelectionMode.Index: 
					Target = parent.GetChild(target_index);
					break;
				case SelectionMode.This:
					Target = parent;
					break;
								
				case SelectionMode.Type:
					CGObject t = parent.FindChildren(target_cgtype);
					if (t is Actor)
						Target = t as Actor;
					else
						return false;
					break;
					
				case SelectionMode.Random:
					return false;
			}
			
			if (Target == null) return false;
			
			bool all_true = true;
			
			foreach(Action action in children){
				if (action.Run (s, Target, p2) == false)
					all_true = false;
			}
			
			return all_true;
			
		}
		
		public override void SaveParameters(System.IO.BinaryWriter writer){
	
			base.SaveParameters(writer);
			
			writer.Write((Int32)selection_source);
			writer.Write ((Int32)selection_mode);
			
			writer.Write (SourceCGType);
			writer.Write (TargetCGType);
			writer.Write (target_index);
		}	
		
		public override void LoadParameters(System.IO.BinaryReader reader){
			base.LoadParameters(reader);
			
			selection_source = (SelectionSource)reader.ReadInt32();
			selection_mode = (SelectionMode)reader.ReadInt32();
			
			SourceCGType = reader.ReadString();
			TargetCGType = reader.ReadString();
			TargetIndex = reader.ReadInt32();
			
			//trigger = (CGME.InterfaceEvent)Enum.Parse(typeof(InterfaceEvent),reader.ReadString());
		}
		
		public override void CopyFrom(Action copy){

			
			base.CopyFrom(copy);
			
			selection_source = (copy as ActionSelect).selection_source;
			selection_mode = (copy as ActionSelect).selection_mode;
			
			SourceCGType = (copy as ActionSelect).SourceCGType;
			TargetCGType = (copy as ActionSelect).TargetCGType;
			TargetIndex = (copy as ActionSelect).TargetIndex;
		}
		
		
	}
}

