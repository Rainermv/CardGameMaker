//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.18444
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

namespace CGME
{
	[Serializable]
	public class CGLibrary
	{
		// INSTANCE
		//private static CGLibrary instance;
		
		public CGLibrary(){
		
		}
		
//		public static CGLibrary GetInstance(){
//		
//			if (instance == null){
//				GameManager.DebugLog("instantiating library");
//				instance = new CGLibrary();
//			}
//			
//			return instance;
//		}
		
		///////
		
		private List<Card> card_library = new List<Card>();
		private List<Action> action_library = new List<Action>();
		private List<Resource> resource_library = new List<Resource>();
		
		
		public List<Resource> resourceLibrary{
			get{return resource_library;}
			set{resource_library = value;}
		}
		
		public Resource GetResource(int i){
			//GameManager.DebugLog(resource_library.Count.ToString());
			if (i < resource_library.Count){
				return resource_library[i];
			}
			return null;
		}
		
		public Resource GetResource(string s){
			//GameManager.DebugLog(resource_library.Count.ToString());
			foreach (Resource res in resourceLibrary){
				if (res.CGType == s) return res;
			}
			return null;
		}
		
		public string[] ResourceTypes(){
			string[] cg_types = new string[resourceLibrary.Count];
			
			int i = 0;
			foreach (Resource res in resourceLibrary){
				cg_types[i++] = res.CGType;
			}
			
			
			return cg_types;
		}
		
		public string GetResourceType(int i){
			
			string[] types = ResourceTypes ();
			
			if (i < types.Length)
				return types[i];
			
			return "Resource library empty";
		}
		
		// ACTION
		
		public List<Action> actionLibrary{
			get{return action_library;}
			set{action_library = value;}
		}
		
		public Action GetAction(int i){
			//GameManager.DebugLog(resource_library.Count.ToString());
			if (i < action_library.Count){
				return action_library[i];
			}
			return null;
		}
		
		public Action GetAction(string s){
			//GameManager.DebugLog(resource_library.Count.ToString());
			foreach (Action act in actionLibrary){
				if (act.CGType == s) return act;
			}
			return null;
		}
		
		public string[] ActionTypes(){
			string[] cg_types = new string[actionLibrary.Count];
			
			int i = 0;
			foreach (Action act in actionLibrary){
				cg_types[i++] = act.CGType;
			}

			
			return cg_types;
		}
		
		public string GetActionType(int i){
			
			string[] types = ActionTypes ();
			
			if (i < types.Length)
				return types[i];
			
			return "Action library empty";
		}
		
		// CARD
				
		public List<Card> CardsLibrary{
			get{return card_library;}
			set{card_library = value;}
		}
		
		public Card GetCard(int i){
			//GameManager.DebugLog(resource_library.Count.ToString());
			if (i < card_library.Count){
				return card_library[i];
			}
			return null;
		}
		
		public Card GetCard(string s){
			//GameManager.DebugLog(resource_library.Count.ToString());
			foreach (Card cd in card_library){
				if (cd.CGType == s) return cd;
			}
			return null;
		}
		
		public string[] CardTypes(){
			string[] cg_types = new string[card_library.Count];
			
			int i = 0;
			foreach (Card cd in card_library){
				cg_types[i++] = cd.CGType;
			}
			
			
			return cg_types;
		}
		
		public string GetCardType(int i){
			
			string[] types = CardTypes ();
			
			if (i < types.Length)
				return types[i];
			
			return "Card library empty";
		}
		

//		public Byte[] Write(){
//		
//			Byte[] bytes = new byte[card_library.Count + action_library.Count + resource_library.Count];
//			int i = 0;
//			
//			foreach (Card cd in card_library){
//				bytes[i++] = cd.Write();
//			}
//			foreach (Resource res in resourceLibrary){
//				bytes[i++] = res.Write();
//			}
//			
//			return bytes;
//		}		
//		
//		public void Read(int cards, int actions, int ress, Byte[] bytes){
//			
//			for (int i = 0; i < cards; i++){
//				Card c = new Card();
//				c.Read(bytes);
//				
//				card_library.Add(c);
//			}
//			for (int i = 0; i < cards; i++){
//				Card c = new Card();
//				c.Read(bytes);
//				
//				card_library.Add(c);
//			}
//					
//		}
	}
}

