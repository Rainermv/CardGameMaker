//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.18408
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

namespace CGME
{
	public abstract class CGObject
	{
		protected List<IEngineListener> listeners = new List<IEngineListener>();
		
		protected string cgtype;
		public string CGType{get{return cgtype;}set{cgtype = value;}}
		
		protected bool enabled;
		public bool Enabled{get{return enabled;}}
		
		private int id;
		public int Id{get{return id;}}
		
		public int index;
		
		public bool DestroyFlag = false;
		
		protected CGObject parent;
		
		public CGObject Parent{
			get {return parent;}
			set {parent = value;}
		}
		
		public void SetId(){	
			id = GameManager.NewId();
			DispatchEvent (EngineEvent.SetId, this, null);
		}
				
		public void AddListener(IEngineListener listener){
			listeners.Add(listener);
		}
		
		public void DispatchEvent(EngineEvent ee, CGObject param1, CGObject param2){
			foreach (IEngineListener listener in listeners){
				listener.Act(ee, this, param1, param2);
			}
		}
		
		public abstract void Start();
		
		public virtual void Enable(bool enable){
			this.enabled = enable;
		}
		public virtual CGObject FindObject (string actor_name){
			if (this.cgtype == actor_name)
				return this;
			return null;
		}
		public virtual CGObject FindObject (int id){
			return (this.id == id? this : null);
		}
		
		public virtual void Destroy(){
			if (DestroyFlag == true)
				return;
			
			DestroyFlag = true;
		}
		
		public bool Cleanup(){

			if (DestroyFlag == true){
			
				if (this is Actor)
					(this as Actor).ClearExtensions();
				
				if (this is ResourceableObject)
					(this as ResourceableObject).ClearResources();
				
				ClearChildren();
				this.parent.CleanupChildren();
				this.parent = null;
				this.listeners.Clear ();

			}

			return DestroyFlag;
			
		}
		
		public virtual void ClearChildren(){
			// DO NOTHING
		}
		public virtual void CleanupChildren(){
			// DO NOTHING
		}
		
		public virtual Byte[] Write(){
			System.IO.MemoryStream stream = new System.IO.MemoryStream();
			System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);
			
			writer.Write(cgtype);
			SaveParameters(writer);
			
			byte[] temp = stream.ToArray();
			//GameManager.DebugLog("Saving " + this.GetType().ToString());
			
			return temp;
		
		}
			
		public virtual void Read(Byte[] bytes){
			
			if (bytes != null){
								
				System.IO.MemoryStream stream = new System.IO.MemoryStream(bytes);
				System.IO.BinaryReader reader = new System.IO.BinaryReader(stream);
				
				cgtype = reader.ReadString();
				LoadParameters (reader);
				
				//GameManager.DebugLog("loading " + name);
			}
			
		}
		
		public virtual void SaveParameters(System.IO.BinaryWriter writer){
			return;
		}	
		
		public virtual void LoadParameters(System.IO.BinaryReader reader){
			return;
		}
		
		
		
		
	
	
	}
}

