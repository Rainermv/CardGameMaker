//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.544
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

namespace CGME
{
	//[Serializable]
	public class Deck : CGME.Actor
	{
		// PRIVATE ------------------------------------------------
		public List<CGME.Card> cards = new List<CGME.Card>();

		// CONSTRUCTORS --------------------------------------------
		public Deck(){
			cgtype = "New Deck";
			enabled = true;
		}
		
//		public Deck(string name, bool enabled = true){
//			Name = name;
//			this.enabled = enabled;
//		}

		public override Actor GetChild(int index){
			if (index >= cards.Count) return null;
			return cards[index] as Actor;
		}
			

		// GET/SET FUNCIONS -----------------------------------------

		public CGME.Card GetCard(CGME.Card _card)
		{
			foreach (Card card in cards) {
				if (card == _card)
					return card;
			}
			return null;
		}

		public CGME.Card GetCard(string name)
		{
			foreach (Card card in cards) {
				if (card.CGType == name)
					return card;
			}
			return null;
		}

		public Card GetCard(int index){
			return cards[index];
		}

		public int Cards_Size{
			get { return cards.Count;}
		}

		// LIST FUNCTIONS ------------------------------------------
		
		//public Card AddChild
		
		public override CGObject AddChild(CGObject child){
			if (child is Card){
				child.Parent = this;
				return AddCard (child as Card);
			}
			
			return null;
		}
		
		public override void RemoveChild(CGObject child){
			if (child is Card)
				RemoveCard (child as Card);
		}

		public Card AddCard(CGME.Card card){
			DispatchEvent(EngineEvent.AddChild, card, null);
			cards.Add(card);
			
			card.Parent = this;
			
			return card;
		}
		
		public void RemoveCard(int index){
			cards.RemoveAt(index);
		}
		
		public void RemoveCard(CGME.Card card){
			cards.Remove(card);
		}

		public void ClearCards(){
			cards.Clear();
		}

		// PUBLIC FUNCTIONS ------------------------------------------

		public override void  EnableChildren(bool enable){
				
			foreach (Card card in cards){
				card.Enable(enable);
			}
		}

		public override void Shuffle()
		{
			for (int i = 0; i < Cards_Size -1; i++){
				
				int rand_index = UnityEngine.Random.Range(i,Cards_Size);
				Card tc = cards[i];
				cards[i] = cards[rand_index];
				cards[rand_index] = tc;
				
				cards[i].index = rand_index;
			}
			
			DispatchEvent(EngineEvent.UpdateChildren,null,null);
			
			
		}

		public void Sort()
		{
		}
		
		public override CGObject FindChildren(string name){
			
			foreach (CGObject child in cards){
				CGObject found = child.FindObject(name);
				if (found != null) return found;
			}
			return null;
		}
		
		public override CGObject FindChildren(int id){
			
			foreach (CGObject child in cards){
				CGObject found = child.FindObject(id);
				if (found != null) return found;
					
			}
			
			return null;
		}
		
		public override void StartChildren(){
			foreach (CGObject child in cards)
				child.Start();
		}
		
		
		public override void ClearChildren(){
			cards.Clear();
		}
		public override void CleanupChildren(){
			for (int i = 0; i < cards.Count; i++){
				if (cards[i].DestroyFlag){
					cards.RemoveAt(i);
					break;
				}
			}
		}
	}
}

