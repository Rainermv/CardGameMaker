//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.544
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;

namespace CGMEditor
{

	public class WindowCardMaker : EditorWindow
	{
	
		CGM.GameManager manager_lib;
		string[] resources;
		bool[] active_resources;
		
		//List<CGME.CardTypeConfig> card_types;
		
		
		
		private static WindowCardMaker window_instance;
		
		[MenuItem ("CGM/Card Maker")]
		public static WindowCardMaker Init(){
					
			window_instance = (WindowCardMaker )EditorWindow.GetWindow(typeof(WindowCardMaker));
			
			
			
			if (window_instance.manager_lib == null){
				 Debug.LogWarning("Manager not in the scene");
				 return null;
			}
			
			
			window_instance.title = "Card Maker";
						
			return window_instance;
			
		}
		
		void OnEnable(){
		
			manager_lib = FindObjectOfType<CGM.GameManager>();
			resources = manager_lib.CGME_Lib.ResourceTypes();
			
			if (resources == null){
				Debug.LogWarning("resources not set");
			}
			
			active_resources = new bool[resources.Length];
		}
		
		void OnGUI()
		{
		
			foreach (CGM.CardTypeConfig card_type in manager_lib.CardTypeConfigList){
				
				card_type.name = EditorGUILayout.TextField ("Type Name",card_type.name);
				if (GUILayout.Button ("X")){
					// do nothing
				}
				
				EditorGUI.indentLevel++;
				card_type.card_back = (Sprite)EditorGUILayout.ObjectField("Card Back",card_type.card_back,typeof(Sprite),false);
				card_type.card_frame = (Sprite)EditorGUILayout.ObjectField("Card Frame",card_type.card_frame,typeof(Sprite),false);
				
				
				if (resources.Length == 0){
					
					EditorGUILayout.LabelField("Resource library is empty");
					EditorGUILayout.LabelField("Add some resources to the game manager first");
					
					break;
					
				}
				
				EditorGUILayout.LabelField("Select the resources used by this card");
				
				int i = 0;
				foreach (string res in resources){
					active_resources [i] = EditorGUILayout.ToggleLeft(res,active_resources [i]);
					i++;
				}
				if (GUILayout.Button ("Save " + card_type.name)){
					card_type.resources_used.Clear();
					foreach (bool active_res in active_resources){
						card_type.resources_used.Add(active_res);
					}
				}
					
				EditorGUI.indentLevel--;
				
			}
			
			if (GUILayout.Button ("Add Card Type")){
				manager_lib.CardTypeConfigList.Add (new CGM.CardTypeConfig());
			}
		
		}
		
		
	}
}

