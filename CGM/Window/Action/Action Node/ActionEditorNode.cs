//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.18444
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

namespace CGMEditor
{
	public class ActionEditorNode
	{
		public static int ID = 0;
		static float mod_x = 100;
		static float mod_y = 100;
		static float width = 80;
		static float height = 80;
		
		protected static GUIStyle standard_style = new GUIStyle();
		
		bool selected = false;
		
		private Rect button_rect;
		
		public Rect rectangle;
		public CGME.Action action;
		public int id;
		
		public List<ActionEditorNode> children = new List<ActionEditorNode>();
		
		public static void SetStyles(){
		
			standard_style = GUI.skin.box;
			//style = new GUIStyle();
			standard_style.alignment = TextAnchor.MiddleCenter;
			standard_style.clipping = TextClipping.Overflow;
			standard_style.wordWrap = true;
			standard_style.border = new RectOffset(10,10,10,10);
			
		}
			
		public ActionEditorNode (CGME.Action act)
		{
			this.rectangle = new Rect();
			this.action = act;
			//this.id = id.Ivalue;
			this.id = ActionEditorNode.ID++;
			
			//Debug.Log ("ID: " + this.id);
		}
		
		public void AddChildren( ref List<Rect> rect_list){
			
			
			if (action is CGME.ActionGroup){
				foreach (CGME.Action child_action in (action as CGME.ActionGroup).Children){
					AddChild (child_action,ref rect_list);				
				}
				//Debug.Log ("5");
				return;
			}
			
			if (action is CGME.ActionIfThenElse){
				AddChild ((action as CGME.ActionIfThenElse).GetIF(),ref rect_list);
				AddChild ((action as CGME.ActionIfThenElse).GetTHEN(),ref rect_list);
				AddChild ((action as CGME.ActionIfThenElse).GetELSE(),ref rect_list);
			}
			
		}
		
		public void AddChild(CGME.Action child_action, ref List<Rect> rect_list){
			//Debug.Log ("2");
			
			
			//Debug.Log ("3");
			//ActionEditorNode child_node = AddNewNode(child_action,parent_node,x,y);
			ActionEditorNode child_node = InstantiateNode(child_action);
			
			rect_list.Add(child_node.rectangle);
			
			children.Add (child_node);
			//Debug.Log ("4");
			child_node.AddChildren(ref rect_list);
			
		}
		
		public static ActionEditorNode InstantiateNode(CGME.Action action){
		
			if (action is CGME.ActionGroup){
							
				if (action is CGME.ActionSelect)
					return new ActionEditorNodeSelect(action);
				
				else if (action is CGME.ActionBufferLoad)
					return new ActionEditorNodeBufferLoad(action);
				
				return new ActionEditorNodeGroup(action);
			}
			
			else if (action is CGME.ActionConditionComparable){
				
				if (action is CGME.ActionConditionCompareParent)
					return new ActionEditorNodeCompareParents(action);
			}
			
			else if (action is CGME.ActionConditionCompareResource)
				return new ActionEditorNodeCompareResource(action);
							
			else if (action is CGME.ActionConditionIsValid)
				return new ActionEditorNodeObjectValid(action);
			
			else if (action is CGME.ActionTransferObject)
				return new ActionEditorNodeTransfer(action);
			
			else if (action is CGME.ActionDestroyObject)
				return new ActionEditorNodeDestroyObject(action);
			
			else if (action is CGME.ActionModifyResource)
				return new ActionEditorNodeModifyResource(action);
				
			else if (action is CGME.ActionConditionBufferSize)
				return new ActionEditorNodeBufferSize(action);
			
			else if (action is CGME.ActionBufferSave)
				return new ActionEditorNodeBufferSave(action);
			
			

			return new ActionEditorNode(action);
			
		}
		
		public void CountLevels(int level){
			
				NodeLevelCounter.CountLevel(level);
				
				foreach (ActionEditorNode child in children){
					child.CountLevels (level+1);
				}
		}
		
		public virtual void RepositionNodes(int level){
			
			rectangle = new Rect();
			
			rectangle.x = NodeLevelCounter.GetLevelX(level) * mod_x;
			rectangle.y = NodeLevelCounter.GetLevelY(level) * mod_y;
			
			rectangle.width = width;
			rectangle.height = height;
			
			if (level != 0){
				button_rect= new Rect(rectangle);
				
				button_rect.x 	   += button_rect.width  * 0.70f;
				//button_rect.y 	   += button_rect.height * 0.70f;
				button_rect.width  *= 0.30f;
				button_rect.height *= 0.30f;
			}
			
			foreach (ActionEditorNode child in children){
				child.RepositionNodes (level+1);
			}
			
		}
				
		public virtual void DrawAsNode(GUI.WindowFunction func){
			
			//rectangle = GUI.Window(id, rectangle, func, action.CGType);
			
			rectangle = GUI.Window(id, rectangle, func, action.CGType); 
			
			foreach (ActionEditorNode child in children){
				child.DrawAsNode(func);
			}

		}
		
		// return true if the action has changed
		public virtual bool DrawAsNode(){
			
			//rectangle = GUI.Window(id, rectangle, func, action.CGType);
			Color normal_color = GUI.color;
			if (selected){
				GUI.color = new Color(0.3f, 0.3f, 0.8f);
			} 
			
			GUI.Box(rectangle,action.CGType,standard_style);
			
			if (selected ) 
				GUI.color = normal_color;
			
			foreach (ActionEditorNode child in children){
			
				if(child.DrawAsNode() == true)
					return true;
			}
			
			return DrawDeleteButton();
		}
		
		public virtual void DrawAsInspector(){
		
			EditorGUILayout.LabelField(action.CGType);
			
		}
		
		public bool DrawDeleteButton(){
		
			CGME.Action parent = action.ParentAction;
			
			if (parent != null && parent is CGME.ActionGroup){
			
				if (GUI.Button(button_rect,"X",standard_style)){

					(parent as CGME.ActionGroup).RemoveAction(action);
					return true;
				}
			}
			
			return false;
			
		}
		
		public void DrawLines(Texture2D line_text){
		
			foreach (ActionEditorNode child in children){
				DrawNodeCurve (this.rectangle, child.rectangle, line_text);
				
				child.DrawLines (line_text);
			}
		
		}
		
		void DrawNodeCurve(Rect start, Rect end, Texture2D _aaLine)
		{
			Vector3 startPos = new Vector3(start.x + start.width / 2, start.y + start.height, 0);
			Vector3 endPos = new Vector3(end.x + end.height / 2, end.y, 0);
			Vector3 startTan = startPos + Vector3.up * 50;
			Vector3 endTan = endPos + Vector3.down * 50;
			Handles.DrawBezier(startPos, endPos, startTan, endTan, Color.black, _aaLine, 1.5f);
		}
		
		public Rect? GetRect(int value){
			
			if (this.id == value)
				return (rectangle as Rect?);
			
			foreach (ActionEditorNode child in children){
				Rect? child_r = child.GetRect(value);
				if (child_r != null)
					return child_r;
			}
			return null;
		}
		
		public void Clear(){
		
			foreach (ActionEditorNode child in children){
				child.Clear ();
			}
			
			children.Clear ();		
		}
		
		public virtual void ClickedPopup(int index){
			
		}
		
		public void ClickedBoundaries(Vector2 point){
			
			selected = false;
			
			if (rectangle.Contains(point)){
				selected = true;
				ShowInspector ();
				//return this;
			}
			
			//selected = false;
								
			foreach (ActionEditorNode child in children)
				child.ClickedBoundaries(point);
			
			
			//return null;
		}
		
		private void ShowInspector(){
		
			WindowActionNode.Init(this);
		}
		
	}
}

