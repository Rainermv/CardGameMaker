//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.18444
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

using UnityEngine;
using UnityEditor;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using System.Text;



namespace CGMEditor
{
	
	
	public class WindowActionEditor  : EditorWindow
	{
		static WindowActionEditor  window_instance;
		
		/// ----------
	
		public Rect window1, window2, _handleArea;
		private bool _nodeOption, _options, _handleActive, _action;
		private Texture2D _resizeHandle, _aaLine;
		private GUIContent _icon;
		private float _winMinX, _winMinY;
		private int _mainwindowID;
		
		private CGM.Action selected_action;
		private List<Rect> rectangles = new List<Rect>();
		
		private Vector2 scrollPosition = Vector2.zero;
		
		private WindowActionNode action_inspector;
		
		//private List<ActionEditorNode> action_nodes = new List<ActionEditorNode>();
		private ActionEditorNode root_action_node;
		
		private CGME.Action root_action;
		
		private ActionEditorPopupWindow PopupWindow = ActionEditorPopupWindow.GetInstance();
		
		//[MenuItem("CGM/Action Editor")]
		public static void Init(CGME.Action act)
		{
			window_instance = (WindowActionEditor )EditorWindow.GetWindow(typeof(WindowActionEditor));
			window_instance.wantsMouseMove = true;
			//window.title = GetWindowTitle();
			//window_instance.selected_action = window_instance.GetSelectedAction();
			window_instance.root_action = act;
			window_instance.name = act.CGType;
			ActionEditorNode.SetStyles();
			ActionEditorPopupWindow.SetStyle ();
			window_instance.CreateNodes();

		}
		
//		void OnEnable()
//		{
//			SceneView.onSceneGUIDelegate += SceneGUI;
//		}
//		
//		void SceneGUI(SceneView sceneView)
//		{
//			// This will have scene events including mouse down on scenes objects
////			Event cur = Event.current;
////			
////			if (cur.isMouse)
////				Debug.Log (cur.mousePosition);
//		}
		
		public static void Redraw(){
			window_instance.CreateNodes();
		}
		
		private void CreateNodes()
		{
			
			if (root_action == null){
				Debug.LogWarning("action is null");
				return;
			}
			
			_winMinX = 50f;
			_winMinY = 50f;
			
			NodeLevelCounter.Clear();
			rectangles.Clear();
			ActionEditorNode.ID = 0;
			
			if (root_action_node != null)
				root_action_node.Clear();
			
			root_action_node = ActionEditorNode.InstantiateNode(root_action);
			
			rectangles.Add(root_action_node.rectangle);										
			
			root_action_node.AddChildren(ref rectangles);
			root_action_node.CountLevels(0);
			root_action_node.RepositionNodes(0);
			//NodeLevelCounter.DebugLevels();

			//_resizeHandle = AssetDatabase.LoadAssetAtPath("Assets/Sprites/NodeEditor/ResizeHandle.png", typeof(Texture2D)) as Texture2D;
			_aaLine = AssetDatabase.LoadAssetAtPath("Assets/Sprites/NodeEditor/AA1x5.png", typeof(Texture2D)) as Texture2D;
			//_icon = new GUIContent(_resizeHandle);
			//_mainwindowID = GUIUtility.GetControlID(FocusType.Native); //grab primary editor window controlID
		}
		
//		string GetWindowTitle(){
//			//Debug.Log ("Get Window Title");
//			if (Selection.activeGameObject != null){
//				//Debug.Log ("Get active game object");
//				CGM.Action selected_action = Selection.activeGameObject.GetComponent<CGM.Action>();
//				if (selected_action != null){
//					//Debug.Log ("Get action");
//					//string window_name = 
//					return "Action Editor - selected action";
//				}
//				return "Action Editor - Selected object has no action";
//			}
//			//else Debug.Log ("No Selected object");
//			return "Action Editor - No object Selected";
//		
//		}
//		
//		float t = 0.25f;
//		float timer = 0.25f;
//		
//		//var timeOut : float;
//		
//		void StartCountdown(float seconds)
//		{
//			timer = Time.realtimeSinceStartup + seconds;
//		}
//		
//		void Timer()
//		{	
//			//Debug.Log (Time.realtimeSinceStartup + "/" + timer);
//			if (Time.realtimeSinceStartup > timer)
//			{
//				//Debug.Log (Time.realtimeSinceStartup);
//				selected_action = GetSelectedAction();
//				StartCountdown(t);
//			}
//		}

		
//		void Update(){
//			Timer();
//		}
		
//		CGM.Action GetSelectedAction(){
//		
//			//Debug.Log ("Get Window Title");
//			if (Selection.activeGameObject != null){
//				//Debug.Log ("Get active game object");
//				CGM.Action selected_action = Selection.activeGameObject.GetComponent<CGM.Action>();
//				if (selected_action != null){
//					Debug.Log (selected_action.name);
//					return selected_action;
//				}
//			}
//			//else Debug.Log ("No Selected object");
//			return null;
//		
//		}
		
		void DrawBoxes(){
		
			scrollPosition = GUI.BeginScrollView(new Rect(0, 0, 800, 600), scrollPosition, new Rect(0, 0, 1200, 1200));
			
			if (root_action_node.DrawAsNode() == true){
				Debug.Log ("Nodes changed, redrawing");
				CreateNodes();
			}

			DrawLines ();
			
			if (PopupWindow != null)
				PopupWindow.Draw ();
			
			GUI.EndScrollView();
			
		}
		
		
		void DrawWindows(){
		
			BeginWindows();
			root_action_node.DrawAsNode (DrawNodeWindow);	
			EndWindows();
			
			DrawLines();
		}
		
		void DrawLines(){
			root_action_node.DrawLines(_aaLine);
		}
			
		void OnGUI()
		{
			
			if (root_action_node == null || root_action == null){
				window_instance.Close();
				return;
			}

//			window = (WindowActionEditor )EditorWindow.GetWindow(typeof(WindowActionEditor));
			if (window_instance != null)
				window_instance.title = root_action.CGType;
												
			//root_action_node.Draw(DrawNodeWindow);
			
			DrawBoxes ();
			
			if (Event.current.isMouse && Event.current.type == EventType.mouseDown){
				
				if (PopupWindow != null)
					PopupWindow.ClickBoundaries(Event.current.mousePosition + scrollPosition);
					
				root_action_node.ClickedBoundaries(Event.current.mousePosition + scrollPosition);
				
			}
		
			//window1 = GUI.Window(99, window1, DrawNodeWindow, "Window 1");   // Updates the Rect's when these are dragged
			//window2 = GUI.Window(100, window2, DrawNodeWindow, "Window 2");

			
//			DrawNodeCurve(window1, window2);
//			
//			GUILayout.BeginHorizontal(EditorStyles.toolbar);
//			_options = GUILayout.Toggle(_options, "Toggle Me", EditorStyles.toolbarButton);
//			GUILayout.FlexibleSpace();
//			GUILayout.EndHorizontal();
//			
//			//if drag extends inner window bounds _handleActive remains true as event gets lost to parent window
//			if ((Event.current.rawType == EventType.MouseUp) && (GUIUtility.hotControl != _mainwindowID))
//			{
//				GUIUtility.hotControl = 0;
//			}
		}
		
		private void DrawNodeWindow(int id)
		{
			if (GUIUtility.hotControl == 0)  //mouseup event outside parent window?
			{
				_handleActive = false; //make sure handle is deactivated
			}
			
			float _cornerX = 0f;
			float _cornerY = 0f;
			switch (id) //case which window this is and nab size info
			{
			case 99:
				_cornerX = window1.width;
				_cornerY = window1.height;
				break;
			case 100:
				_cornerX = window2.width;
				_cornerY = window2.height;
				break;
			
			default:
//				Rect? r= root_action_node.GetRect(id);
//				if (r != null){
//					_cornerX = ((Rect)r).width;
//					_cornerY = ((Rect)r).height;
//				}
				_cornerX = rectangles[id].width;
				_cornerY = rectangles[id].height;
				break;
			}			
			
			//begin layout of contents
			GUILayout.BeginArea(new Rect(1, 16, _cornerX - 3, _cornerY - 1));
			GUILayout.BeginHorizontal(EditorStyles.toolbar);
			_nodeOption = GUILayout.Toggle(_nodeOption, "Node Toggle", EditorStyles.toolbarButton);
			GUILayout.FlexibleSpace();
			GUILayout.EndHorizontal();
			GUILayout.EndArea();
			
			GUILayout.BeginArea(new Rect(1, _cornerY - 16, _cornerX - 3, 14));
			GUILayout.BeginHorizontal(EditorStyles.toolbarTextField, GUILayout.ExpandWidth(true));
			GUILayout.FlexibleSpace();
			
			//grab corner area based on content reference
			_handleArea = GUILayoutUtility.GetRect(_icon, GUIStyle.none);
			GUI.DrawTexture(new Rect(_handleArea.xMin + 6, _handleArea.yMin - 3, 20, 20), _resizeHandle); //hacky placement
			_action = (Event.current.type == EventType.MouseDown) || (Event.current.type == EventType.MouseDrag);
			if (!_handleActive && _action)
			{
				if (_handleArea.Contains(Event.current.mousePosition, true))
				{
					_handleActive = true; //active when cursor is in contact area
					GUIUtility.hotControl = GUIUtility.GetControlID(FocusType.Native); //set handle hot
				}
			}
			
			EditorGUIUtility.AddCursorRect(_handleArea, MouseCursor.ResizeUpLeft);
			GUILayout.EndHorizontal();
			GUILayout.EndArea();
			
			//resize window
			if (_handleActive && (Event.current.type == EventType.MouseDrag))
			{
				ResizeNode(id, Event.current.delta.x, Event.current.delta.y);
				Repaint();
				Event.current.Use();
			}
			
			//enable drag for node
			if (!_handleActive)
			{
				GUI.DragWindow();
			}
		}
		
		private void ResizeNode(int id, float deltaX, float deltaY)
		{
			switch (id)
			{
			case 1:
				if ((window1.width + deltaX) > _winMinX) { window1.xMax += deltaX; }
				if ((window1.height + deltaY) > _winMinY) { window1.yMax += deltaY; }
				break;
			case 2:
				if ((window2.width + deltaX) > _winMinX) { window2.xMax += deltaX; }
				if ((window2.height + deltaY) > _winMinY) { window2.yMax += deltaY; }
				break;
			}
		}
		
		void DrawNodeCurve(Rect start, Rect end)
		{
			Vector3 startPos = new Vector3(start.x + start.width, start.y + start.height / 2, 0);
			Vector3 endPos = new Vector3(end.x, end.y + end.height / 2, 0);
			Vector3 startTan = startPos + Vector3.right * 50;
			Vector3 endTan = endPos + Vector3.left * 50;
			Handles.DrawBezier(startPos, endPos, startTan, endTan, Color.black, _aaLine, 1.5f);
		}
	}
}

