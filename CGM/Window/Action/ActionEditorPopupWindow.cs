//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.18444
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

namespace CGMEditor
{
	public class ActionEditorPopupWindow
	{	
		static GUIStyle style = new GUIStyle();
		static int width = 150;
		static int height = 20;
	
		private Rect comp_rectangle;
		Rect box_rect;
		private string[] components;

		public int clicked_index = -1;

		public int Clicked_index {
			get {
				return clicked_index;
			}
			set {
				clicked_index = value;
			}
		}

		public ActionEditorNode owner;
		
		private static ActionEditorPopupWindow instance;
		
		public static void SetStyle(){
		
			style = GUI.skin.button;
			style.alignment = TextAnchor.MiddleCenter;
			style.clipping = TextClipping.Overflow;
			style.wordWrap = true;
		
		}
		
		private ActionEditorPopupWindow(){
			
			//style = new GUIStyle();
			
			
		}
		
		
		public static ActionEditorPopupWindow GetInstance(){
			if (instance == null){

				instance = new ActionEditorPopupWindow();
				
				
			}
			
			return instance;
		}
		
		public void Build(Rect parent_rect, string[] components, ActionEditorNode owner)
		{
			this.comp_rectangle = new Rect(parent_rect);
			
			comp_rectangle.width = width;
			comp_rectangle.height = height;
			
			box_rect = new Rect(comp_rectangle);
			box_rect.height *= components.Length;
			
			this.components = components;
			
			this.owner = owner;
		}
		
		public void Destroy(){
			
			this.comp_rectangle = new Rect();
			this.components = null;
			this.owner = null;
			clicked_index = -1;
		}
		
		public void Draw() {
			DrawComponents();
		}
		
		public void ClickBoundaries(Vector2 position){
		
			if (!comp_rectangle.Contains(position)){	
				Destroy ();
			}
			
		}
		
		void DrawComponents(){
			if (components != null && comp_rectangle != null && owner != null){
				
				GUI.Box (box_rect,"");
				
				int ind = 0;
				Rect button_rect = new Rect(comp_rectangle);
				foreach (string name in components){
					
					if (GUI.Button(button_rect, name,style)){
						clicked_index = ind;
						return;
						//Debug.Log ("Clicked " + name);
					}
					
					ind++;
					button_rect.y += height;
				}
			}
		}
	
	// EOF ----
	}
}

