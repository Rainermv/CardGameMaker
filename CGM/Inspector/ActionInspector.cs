//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.18444
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEditor;
using UnityEngine;
using System.Collections.Generic;

namespace CGMEditor
{
	[CustomEditor(typeof(CGM.Action))]
	public class ActionInspector : Editor
	{
		
		CGM.Action Target;
					
		//string[] conditions;
		int index;
		string[] action_components;
		
		//List<CGME.Action> actions = new List<CGME.Action>();
		
		
		private CGME.ActionDictionary dictionary;
		
		void OnEnable(){
			
			dictionary = CGME.ActionDictionary.GetInstance();
			
			//conditions = dictionary.GetConditions();
			action_components = dictionary.GetActionComponents ();
			
		}
		
		
		CGME.Action GetAction(string name){
			return dictionary.GetAction(name);
			
		}
				
		public override void OnInspectorGUI()
		{
			//Target.TEST_ACTION = EditorGUILayout.ObjectField
			
		
			Target = (CGM.Action)target;
			
			Target.CGME_ActionRoot.CGType = EditorGUILayout.TextField("Name: ", Target.CGME_ActionRoot.CGType);
			Target.gameObject.name = Target.CGME_ActionRoot.CGType;
			
			Target.CGME_ActionRoot.Persistent = Display.Toggle(Target,"Persistent",Target.CGME_ActionRoot.Persistent);
		
			index = EditorGUILayout.Popup("Component to Add: ", index,action_components);
			
			if (GUILayout.Button("Action Editor Window")){
				WindowActionEditor.Init(Target.CGME_ActionRoot);
			}
			
			//EditorGUILayout.EndHorizontal();
			
			
			DisplayAction(Target.CGME_ActionRoot, null);
			
		}
		
		void DisplayAction(CGME.Action action, CGME.ActionGroup parent){
			
			DisplayHeader (action, parent);
			
			if (action is CGME.ActionSelect)
				DisplayBody(action    as CGME.ActionSelect);
								
			else if (action is CGME.ActionTransferObject)
				DisplayBody(action 	  as CGME.ActionTransferObject);
			
			else if (action is CGME.ActionDestroyObject)
				DisplayBody(action 	  as CGME.ActionDestroyObject);
			
			else if (action is CGME.ActionModifyResource)
				DisplayBody(action 	  as CGME.ActionModifyResource);
				
			else if (action is CGME.ActionIfThenElse)
				DisplayBody(action 	  as CGME.ActionIfThenElse);
			
			else if (action is CGME.ActionConditionIsValid)
				DisplayBody(action 	  as CGME.ActionConditionIsValid);
			
			else if (action is CGME.ActionConditionCompareResource)
				DisplayBody(action 	  as CGME.ActionConditionCompareResource);
				
			else if (action is CGME.ActionConditionCompareParent){
				DisplayBody(action 	  as CGME.ActionConditionCompareParent);
			}
				
			else if (action is CGME.ActionEvent)
				DisplayBody(action 	  as CGME.ActionEvent);//			

			DisplayFoot(action, parent);
			
			// STANDARD
			
		}
		
		void DisplayHeader(CGME.Action action, CGME.ActionGroup parent){
			
			EditorGUILayout.BeginHorizontal();
			
			if (parent != null)
				EditorGUILayout.LabelField(action.CGType);
			else
				EditorGUILayout.LabelField(action.CGType + " (root)");
			
			if (action is CGME.ActionGroup && GUILayout.Button("+child " + action.CGType)){	
				AddChild (action as CGME.ActionGroup, GetAction(action_components[index]))	;
				//(action as CGME.ActionGroup).AddAction(GetAction (secondary_options[index2]));
			}
						
			if (parent != null && GUILayout.Button("delete " + action.CGType)){			
				RemoveChild(parent, action);
				//parent.RemoveAction(action);
			}	
			
			EditorGUILayout.EndHorizontal();
			
			
		}
		
		void DisplayFoot(CGME.Action action, CGME.ActionGroup parent){
			
			if (action is CGME.ActionGroup){
				CGME.ActionGroup group = (CGME.ActionGroup) action;
				
				EditorGUI.indentLevel++;
				{
					for (int i = 0; i < group.Actions_Size; i ++){
						DisplayAction(group.GetAction(i), group);
					}

				}
				EditorGUI.indentLevel--;
				
			}
		}
			
		// DISPLAY ACTION SELECT
		
		void DisplayBody(CGME.ActionSelect action){
		
			EditorGUI.indentLevel++;
			{
				EditorGUILayout.BeginHorizontal();
				{
					//action.Source = (CGME.SelectionSource)(EditorGUILayout.EnumPopup("Source", action.Source)) ;
					action.Source = (CGME.SelectionSource)(Display.EnumPopup(Target,"Source", action.Source)) ;
					switch (action.Source){
					case CGME.SelectionSource.Type:
						//action.SourceCGType = EditorGUILayout.TextField("CGType",action.SourceCGType);
						action.SourceCGType = Display.TextField(Target,"Type",action.SourceCGType);
						break;
					}
				}	
				EditorGUILayout.EndHorizontal();
				
				EditorGUILayout.BeginHorizontal();
				{
					action.Mode = (CGME.SelectionMode)(EditorGUILayout.EnumPopup("Mode", action.Mode));
					
					switch (action.Mode){
					case CGME.SelectionMode.Type:
						//action.TargetCGType = EditorGUILayout.TextField("CGType",action.TargetCGType);
						action.TargetCGType = Display.TextField(Target,"CGType",action.TargetCGType);
						break;
					
					case CGME.SelectionMode.Index:
						//action.TargetIndex = EditorGUILayout.IntField("Index",action.TargetIndex);
						action.TargetIndex = Display.IntField(Target,"Index",action.TargetIndex);
						break;
					}
				}	
				EditorGUILayout.EndHorizontal();
			}
			EditorGUI.indentLevel--;
		}

		// DISPLAY ACTION TRANSFER
				
		void DisplayBody(CGME.ActionTransferObject action){
			EditorGUI.indentLevel++;
			{
				//action.Destination = EditorGUILayout.TextField("Destination", action.Destination);
				//action.Destination = Display.TextField(Target,"Destination", action.Destination);
				EditorGUILayout.BeginHorizontal();
				action.Source = (CGME.SelectionSource)Display.EnumPopup(Target,"Object",action.Source);
				if (action.Source == CGME.SelectionSource.Type) 
					action.SourceString = Display.TextField(Target,"Type",action.SourceString);
				EditorGUILayout.EndHorizontal();
				
				EditorGUILayout.BeginHorizontal();
				action.Destination = (CGME.SelectionSource)Display.EnumPopup(Target,"Destination",action.Destination);
				if (action.Destination == CGME.SelectionSource.Type) 
					action.DestinationString = Display.TextField(Target,"Type",action.DestinationString);
				EditorGUILayout.EndHorizontal();
			}
			EditorGUI.indentLevel--;
		}
		
		// DISPLAY ACTION DESTROY OBJECT
		
		void DisplayBody(CGME.ActionDestroyObject action){
			EditorGUI.indentLevel++;
			{
				EditorGUILayout.BeginHorizontal();
				action.Source = (CGME.SelectionSource)Display.EnumPopup(Target,"Object",action.Source);
				if (action.Source == CGME.SelectionSource.Type) 
					action.SourceString = Display.TextField(Target,"Type",action.SourceString);
				EditorGUILayout.EndHorizontal();
				
			}
			EditorGUI.indentLevel--;
		}
					
		// DISPLAY ACTION MODIFY RESOURCE ------------------------------------


		void DisplayBody(CGME.ActionModifyResource action){
		
			CGM.GameManager lib = GameObject.FindObjectOfType<CGM.GameManager>();
						
			EditorGUI.indentLevel++;
			{
				EditorGUILayout.BeginHorizontal();
				{
					//action.Target 		= (CGME.ModifyParameter)EditorGUILayout.EnumPopup("Target",action.Target);
					//action.Target_Resource = EditorGUILayout.Popup("Resource Type",action.Target_Resource, lib.CGME_Lib.ResourceTypes());
					action.Target 		= (CGME.ResourceSource)Display.EnumPopup(Target,"Target",action.Target);
					action.Target_Resource = Display.Popup(Target,"Resource Type",action.Target_Resource, lib.CGME_Lib.ResourceTypes());
					
				}
				EditorGUILayout.EndHorizontal();
							
				//action.Operation 	= (CGME.ModifyOperation)EditorGUILayout.EnumPopup("Operation",action.Operation);
				action.Operation 	= (CGME.ModifyOperation)Display.EnumPopup(Target,"Operation",action.Operation);
				
				
				EditorGUILayout.BeginHorizontal();
				{
					//action.Param1 		= (CGME.ModifyParameter)EditorGUILayout.EnumPopup("Resource 1",action.Param1);
					action.Param1 		= (CGME.ResourceSource)Display.EnumPopup(Target,"Resource 1",action.Param1);
					if (action.Param1 == CGME.ResourceSource.FixedValue){
						
						CGME.Resource test = lib.CGME_Lib.GetResource(action.Target_Resource);
						if (test is CGME.ResourceBool) 
							//action.BoolMod = EditorGUILayout.Toggle("Boolean",action.BoolMod);
							action.BoolMod = Display.Toggle(Target,"Boolean",action.BoolMod);
						else if (test is CGME.ResourceNumber) 
							action.NumberMod = Display.IntField(Target,"Number",action.NumberMod);
						else if (test is CGME.ResourceText) 
							action.TextMod = Display.TextField(Target,"Text",action.TextMod);

					}
					else
						action.Operation_Resource = Display.Popup(Target,"Resource Type",action.Operation_Resource, lib.CGME_Lib.ResourceTypes());
				}
				EditorGUILayout.EndHorizontal();

				
			}
			EditorGUI.indentLevel--;
		}
		
		// COMPARE RESOURCES -------------------------------------------
		
		void DisplayBody(CGME.ActionConditionCompareResource action){
			
			CGM.GameManager lib = GameObject.FindObjectOfType<CGM.GameManager>();
			
			EditorGUI.indentLevel++;
			{
				EditorGUILayout.BeginHorizontal();
				{
					action.Target 		= (CGME.ResourceSource)Display.EnumPopup(Target,"Target",action.Target);
					action.Target_Resource = Display.Popup(Target,"Resource Type",action.Target_Resource, lib.CGME_Lib.ResourceTypes());
					
				}
				EditorGUILayout.EndHorizontal();
				
				action.Operation 	= (CGME.CompareOperation)Display.EnumPopup(Target,"Operation",action.Operation);
				
				
				EditorGUILayout.BeginHorizontal();
				{
					action.Param1 		= (CGME.ResourceSource)Display.EnumPopup(Target,"Resource 1",action.Param1);
					if (action.Param1 == CGME.ResourceSource.FixedValue){
						
						CGME.Resource test = lib.CGME_Lib.GetResource(action.Target_Resource);
						if (test is CGME.ResourceBool) 
							action.BoolMod = Display.Toggle(Target,"Boolean",action.BoolMod);
						else if (test is CGME.ResourceNumber) 
							action.NumberMod = Display.IntField(Target,"Number",action.NumberMod);
						else if (test is CGME.ResourceText) 
							action.TextMod = Display.TextField(Target,"Text",action.TextMod);
						
					}
					else
						action.Operation_Resource = Display.Popup(Target,"Resource Type",action.Operation_Resource, lib.CGME_Lib.ResourceTypes());
				}
				EditorGUILayout.EndHorizontal();
			}
			EditorGUI.indentLevel--;
		}
		
		// OBJECT IS VALID -------------------------------------------
		
		void DisplayBody(CGME.ActionConditionIsValid action){
						
			EditorGUILayout.BeginHorizontal();
			action.Source = (CGME.SelectionSource)Display.EnumPopup(Target,"Source",action.Source);
			if (action.Source == CGME.SelectionSource.Type) 
				action.SourceString = Display.TextField(Target,"Type", action.SourceString);
			EditorGUILayout.EndHorizontal();
		}
		
		// COMPARE PARENT -------------------------------------------
		
		void DisplayBody(CGME.ActionConditionCompareParent action){
			DisplayBody(action as CGME.ActionConditionComparable);
			
			action.Argument = (CGME.BinaryComparison)Display.EnumPopup(Target,"Argument",action.Argument);
		}
		
		// COMPARABLE -------------------------------------------
				
		void DisplayBody(CGME.ActionConditionComparable action){
			
			EditorGUILayout.BeginHorizontal();
			{
			action.Objects[0] = (CGME.SelectionSource)Display.EnumPopup(Target,"Object 1",action.Objects[0]);
			if (action.Objects[0] == CGME.SelectionSource.Type)
				action.ObjectStrings[0] = Display.TextField(Target,"Parent Type", action.ObjectStrings[0]);
			}
			EditorGUILayout.EndHorizontal();
			
			EditorGUILayout.BeginHorizontal();
			{
				action.Objects[1] = (CGME.SelectionSource)Display.EnumPopup(Target,"Object 2",action.Objects[1]);
				if (action.Objects[1] == CGME.SelectionSource.Type)
					action.ObjectStrings[1] = Display.TextField(Target,"Parent Type", action.ObjectStrings[1]);
			}
			EditorGUILayout.EndHorizontal();
			
		}
		
		void DisplayBody(CGME.ActionIfThenElse action){
		
			EditorGUI.indentLevel++;
			{
				DisplayAction(action.GetIF(),null);
				DisplayAction(action.GetTHEN(),null);
				DisplayAction(action.GetELSE(),null);
			}
			EditorGUI.indentLevel--;
		
		
		}
		
		void DisplayBody(CGME.ActionEvent action){
			action.CustomAction = (CGME.CustomActionEvent)Display.EnumPopup(Target,"Action",action.CustomAction);
		}
		
		void AddChild(CGME.ActionGroup parent, CGME.Action child){
			parent.AddAction(child);
			Target.SetSerialize(true);
		}
		
		void RemoveChild(CGME.ActionGroup parent, CGME.Action child){
			parent.RemoveAction(child);
			Target.SetSerialize(true);
		}
				
	}
}

