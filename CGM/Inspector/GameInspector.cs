//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.18444
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;
using UnityEditor.AnimatedValues;

namespace CGMEditor
{	
	[CustomEditor(typeof(CGM.Game))]
	public class Game : Editor
	{
		//public CGM.ActionBlock source;
		
		public List<bool> expand = new List<bool>();
		CGM.Game Target;
				
		void OnEnable(){
			Target = (CGM.Game)target;
		
//			foreach (CGM.Phase phase in Target.Phases){
//				expand.Add (false);
//			}
			//m_ShowExtraFields. = Repaint;
			
		}
		
		public override void OnInspectorGUI()
		{
			CGM.Game t = (CGM.Game)target;
			t.CGME_Game.CGType = EditorGUILayout.TextField("Type",t.CGME_Game.CGType);
			Target.gameObject.name = t.CGME_Game.CGType;
			//CGM.Game 
			//EditorGUILayout.LabelField("Phases");
			
//			for (int i = 0; i < Target.Phases.Count; i++){
//				DisplayPhase (Target, i);
//			}
//			if (GUILayout.Button("Add Phase")){
//				Target.Phases.Add (new CGM.Phase());
//				expand.Add (false);
//			}
//					
//			source = (CGM.ActionBlock)EditorGUILayout.ObjectField(source,typeof(CGM.ActionBlock),true);
//			
//			if (source is CGM.ActionBlock){
//				EditorGUILayout.LabelField("Action");
//			}
			//source = EditorGUILayout.ObjectField(source, typeof(CGM.ActionBlock), true);
		
		}

//		void DisplayPhase(CGM.Game Target, int index){
//			
//			CGM.Phase phase = Target.Phases[index];
//			
//			EditorGUILayout.BeginHorizontal();
//				expand[index] = EditorGUILayout.Foldout(expand[index], "Phase " + (index+1).ToString());
//				//phase.CGME_Phase.Name = EditorGUILayout.TextField(phase.CGME_Phase.Name);
//				if (GUILayout.Button("x")) {
//					//DestroyImmediate(Target.Phases[index]);
//					Target.Phases.RemoveAt (index);
//				}
//			EditorGUILayout.EndHorizontal();
//
//			if (expand[index]){
//				for (int j = 0; j < phase.Actions.Count; j++){
//					//EditorGUILayout.LabelField("action");
//					DisplayAction (phase, j);
//				}
//				if (GUILayout.Button("Add Action",GUILayout.Width(100))) 
//					//phase.Actions.Add (CreateInstance<CGM.Action>());
//					phase.Actions.Add(new CGM.Action());
//			}
//
//		}
//		
//		void DisplayAction(CGM.Phase phase, int index){
//			CGM.Action action = phase.Actions[index];
//			EditorGUILayout.BeginHorizontal();
//				EditorGUILayout.LabelField("Action " + (index+1).ToString());
//				action = (CGM.Action)EditorGUILayout.ObjectField(action,typeof(CGM.Action),true);
//				if (GUILayout.Button("x")){
//					DestroyImmediate(phase.Actions[index]);
//					phase.Actions.RemoveAt (index);
//				}
//			EditorGUILayout.EndHorizontal();
//			
//		}
		
//		protected void ExampleDragDropGUI(Rect dropArea, SerializedProperty property, CGME.CGObject cgobject){
//			// Cache References:
//			Event currentEvent = Event.current;
//			EventType currentEventType = currentEvent.type;
//			
//			// The DragExited event does not have the same mouse position data as the other events,
//			// so it must be checked now:
//			if ( currentEventType == EventType.DragExited ) DragAndDrop.PrepareStartDrag();// Clear generic data when user pressed escape. (Unfortunately, DragExited is also called when the mouse leaves the drag area)
//			
//			if (!dropArea.Contains(currentEvent.mousePosition)) return;
//			
//			switch (currentEventType){
//			case EventType.MouseDown:
//				DragAndDrop.PrepareStartDrag();// reset data
//				
//				CGMEDragData dragData = new CGMEDragData();
//				dragData.card_object = cgobject;
//				
//				DragAndDrop.SetGenericData(dragDropIdentifier, dragData);
//				
//				Object[] objectReferences = new Object[1]{property.objectReferenceValue};// Careful, null values cause exceptions in existing editor code.
//				DragAndDrop.objectReferences = objectReferences;// Note: this object won't be 'get'-able until the next GUI event.
//				
//				currentEvent.Use();
//				
//				break;
//			case EventType.MouseDrag:
//				// If drag was started here:
//				CustomDragData existingDragData = DragAndDrop.GetGenericData(dragDropIdentifier) as CustomDragData;
//				
//				if (existingDragData != null){
//					DragAndDrop.StartDrag("Dragging List ELement");
//					currentEvent.Use();
//				}
//				
//				break;
//			case EventType.DragUpdated:
//				if (IsDragTargetValid()) DragAndDrop.visualMode = DragAndDropVisualMode.Link;
//				else DragAndDrop.visualMode = DragAndDropVisualMode.Rejected;
//				
//				currentEvent.Use();
//				break;     
//			case EventType.Repaint:
//				if (
//					DragAndDrop.visualMode == DragAndDropVisualMode.None||
//					DragAndDrop.visualMode == DragAndDropVisualMode.Rejected) break;
//				
//				EditorGUI.DrawRect(dropArea, Color.grey);      
//				break;
//			case EventType.DragPerform:
//				DragAndDrop.AcceptDrag();
//				
//				CustomDragData receivedDragData = DragAndDrop.GetGenericData(dragDropIdentifier) as CustomDragData;
//				
//				if (receivedDragData != null  receivedDragData.originalList == this.targetList) ReorderObject();
//				else AddDraggedObjectsToList();
//				
//				currentEvent.Use();
//				break;
//			case EventType.MouseUp:
//				// Clean up, in case MouseDrag never occurred:
//				DragAndDrop.PrepareStartDrag();
//				break;
//			}
//			
//		}
//		
//		public class CustomDragData{
//			public int originalIndex;
//			public IList originalList;
//		}
//		
//		public class CGMEDragData{
//			public CGME.CGObject card_object ;
//		}
		
		
	
	}
		
}

