//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.18444
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEditor;
using UnityEngine;

namespace CGMEditor
{

	[CustomEditor(typeof(CGM.GameManager))]
	public class GameManagerInspector : Editor
	{
		CGM.GameManager Target;
		
		int res_choice ;
		
		CGM.Game game;
		string[] phases;
		
		string[] action_string;
		
		CGM.ActionWrapper[] actions;
		
		
		string res_type;
		
		
		void OnEnable(){
			Target = (CGM.GameManager)target;
			
			res_choice = 0;
			
			game = FindObjectOfType<CGM.Game>();
			phases = game.GetPhases();
			res_type = Display.ResourceTypes[res_choice];
			
			//actions = Target.GetChildrenActions();
			//action_string = new string[actions.Length];
			actions = Target.Actions.ToArray();
			action_string = new string[actions.Length];
			
			int i = 0;
			foreach (CGM.ActionWrapper act in actions){
				action_string[i++] = act.CGME_ActionRoot.CGType;
			}
		}
		
		public override void OnInspectorGUI()
		{
			Target.GameInstance = (CGM.Game)EditorGUILayout.ObjectField(Target.GameInstance ,typeof(CGM.Game),true);
			
			EditorGUILayout.BeginHorizontal();
			{
				res_choice = EditorGUILayout.Popup("Type",res_choice,Display.ResourceTypes);
				res_type = Display.ResourceTypes[res_choice];
				
				if (GUILayout.Button("Add " + res_type + " Resource")){
					switch (res_choice){
					case 0: Target.CGME_Lib.resourceLibrary.Add(new CGME.ResourceAction()); break;
					case 1: Target.CGME_Lib.resourceLibrary.Add(new CGME.ResourceBool  ()); break;
					case 2: Target.CGME_Lib.resourceLibrary.Add(new CGME.ResourceNumber()); break;
					case 3: Target.CGME_Lib.resourceLibrary.Add(new CGME.ResourceText  ()); break;
					}
				}
				
			}
			EditorGUILayout.EndHorizontal();
			
			foreach (CGME.Resource res in Target.CGME_Lib.resourceLibrary){
				if (DisplayResource(res) == true)
					break;
			}
			
			EditorGUILayout.LabelField("Actions");
			
			if (Target.Actions == null) Debug.Log("WTF");
			
			if (GUILayout.Button("add action") == true){
				//Target.Actions.Add (new CGM.ActionWrapper());
				Target.Actions.Add(CreateInstance<CGM.ActionWrapper>());
			}
			
			int i = 0;
			if (GUILayout.Button("clear"))
				Target.Actions.Clear();
			foreach (CGM.ActionWrapper act in Target.Actions){
									
				EditorGUILayout.BeginHorizontal();
				
				act.CGME_ActionRoot.CGType = EditorGUILayout.TextField(act.CGME_ActionRoot.CGType);
				if (GUILayout.Button("Action Editor Window")){
					WindowActionEditor.Init(act.CGME_ActionRoot);
				}
				if (GUILayout.Button("X")){
					Target.Actions.RemoveAt(i);
					break;
				}
				i++;
				EditorGUILayout.EndHorizontal();
			}
			
			//if (Target.Actions.Count > 0)
			//	Target.Actions[0] = (CGM.ActionWrapper)EditorGUILayout.ObjectField(Target.Actions[0] ,typeof(CGM.ActionWrapper),false);
		
		}
		
		//CGM.Library Target;
		
		
		public bool DisplayResource (CGME.Resource res){
			EditorGUILayout.BeginHorizontal();
			{
				
				if (res is CGME.ResourceNumber) 	 
					res.CGType = EditorGUILayout.TextField ("Number Resource",res.CGType);
				else if (res is CGME.ResourceText) 	 
					res.CGType = EditorGUILayout.TextField ("Text Resource",res.CGType);
				else if (res is CGME.ResourceBool)   
					res.CGType = EditorGUILayout.TextField ("Boolean Resource",res.CGType);
				else if (res is CGME.ResourceAction){ 
					CGME.ResourceAction res_action = res as CGME.ResourceAction;
					int diff = res_action.ActionIndex;
					res_action.ActionIndex = EditorGUILayout.Popup(
						"Action",
						res_action.ActionIndex,
						action_string);
					if (res_action.ActionIndex != diff){
						res_action.Value = new CGME.ActionGroup();
						res_action.Value.CopyFrom(actions[res_action.ActionIndex].CGME_ActionRoot);
						res_action.CGType = res_action.Value.CGType;
						Debug.Log ("Copying " + actions[res_action.ActionIndex].CGME_ActionRoot.CGType);
					}
				}
				
				if (GUILayout.Button("Delete " + res.CGType)){
					Target.CGME_Lib.resourceLibrary.Remove(res);
					return true;
				}
				
			}
			EditorGUILayout.EndHorizontal();
			
			return false;
			
		}
		

	}
}

