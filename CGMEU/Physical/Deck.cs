//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.18444
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

namespace CGM
{
	[Serializable]
	public class Deck : CGMObject, CGME.IEngineListener
	{
		public CGME.Deck CGME_Deck = new CGME.Deck();
		
		public override void SetObject(CGME.CGObject cgobj){
			CGME_Deck = (CGME.Deck) cgobj;
		}
		
				
		protected override void RemoveChild(CGME.CGObject cgobj){
			for (int i = 0; i < transform.childCount; i++){
				Card child = transform.GetChild(i).GetComponent<Card>();
				if (child != null && child.CGME_Card == (cgobj as CGME.Card)){
				
					Destroy(child.gameObject);
				
				}
					 
					
			}
		}
		
		
		public override CGME.Actor GetCGMEActor(){
			return CGME_Deck as CGME.Actor;
		}
		
		protected override void SetListener(){
			
			CGME_Deck.AddListener(this);
			
		}
		
		protected override void Start(){
			base.Start();
			ViewStart();
		}
		
		protected void RegisterCards(){
			//GetComponentsInChildrenO
			CGM.Card[] children = (CGM.Card[])transform.GetComponentsInChildren<CGM.Card>();
			
			CGME.GameManager manager = CGME.GameManager.GetInstance();
			foreach (CGM.Card child in children){
				CGME_Deck.AddCard(child.CGME_Card);
			}
			
		}

		
		public void Register(Player player){
			
			RegisterResources ();

			player.CGME_Player.AddDeck(CGME_Deck);
			
			for (int i = 0; i<transform.childCount; i++){
				transform.GetChild(i).SendMessage("Register", this, SendMessageOptions.DontRequireReceiver);
			}
			
			SetListener();
			
		}
		
		protected override void RegisterResource (CGM.Resource res){
			CGME_Deck.AddResource(res.CGME_Resource);
		}
		
		public void UpdateChildren(){
		
			Card[] cgm_cards = GetComponentsInChildren<Card>();
			
			int i = 0;
			foreach (CGME.Card cgme_card in CGME_Deck.cards){
				cgm_cards[i].CGME_Card = cgme_card;			
			}
			
		}
		
//		void Start(){
//			RegisterCards();
//			RegisterResources();
//			SetListener ();
//
//		}
		
		void CGME.IEngineListener.Act(CGME.EngineEvent ee, CGME.CGObject source, CGME.CGObject param1, CGME.CGObject param2){
			switch (ee){
			case CGME.EngineEvent.SetId: 
				ID = param1.Id;
				break;
//			case CGME.EngineEvent.AddChild: 
//				//AddChild (param1,"Card");
//				break;
//			case CGME.EngineEvent.TransferChild: 
//				//RemoveChild (param1);
//				break;
			case CGME.EngineEvent.AddResource:
				AddChild (param1, "Resource");
				break;
				
			case CGME.EngineEvent.UpdateChildren:
				UpdateChildren();
				break;
			}
			
		}
		
//		protected override void ReportEvent(CGME.InterfaceEvent ev){
//						
//			input_listener.ReportEvent(ev,this);
//		}
		
		public override void Write(){
			if (CGME_Deck != null){
				node.type_string = CGME_Deck.GetType().ToString();
				node.data = CGME_Deck.Write();
			}
		}
		
		public override void Read(){
					
			if (node != null){
				CGME_Deck = new CGME.Deck();
				CGME_Deck.Read(node.data);
			}
			
		}
		
		// VIEW
		
		public bool visible_children = true;
		public bool pile = true;
		
		public float size = 5f;
		public float spread = 9f;
		
		public bool deny_reposition;
		
		public CardDisposition disposition;
		
		public void ViewStart(){
		
			Reposition ();
		
		}
		
		public override void Reposition(){
			//float spread = (float)transform.childCount;
			
			if (deny_reposition) 
				return;
			
			int num =0;
			for (int i = 0; i < transform.childCount; i++){
				
				Card child = transform.GetChild(i).GetComponent<Card>();
				
				if (child != null){
					child.gameObject.renderer.enabled = visible_children;
					
					if (child.collider != null)
						child.collider.enabled = visible_children;
					else if (child.collider2D != null)
						child.collider2D.enabled = visible_children;
					
					foreach (Resource res in child.GetChildrenResources()){
						if (res.renderer != null)
							res.renderer.enabled = visible_children;
						
					}
					
					child.transform.position = transform.position;
					
					
					if (!pile){
						//Debug.Log ((spread/size)*num);
						child.transform.Translate(new Vector3((spread/size) * num++, 0,0));
					}

				
				}
				
			}
		
		}
		
		protected override void CleanUp(){
			if (CGME_Deck.Cleanup() == true){
				CGME_Deck = null;
				Destroy(gameObject);
			}		
		}
	
	}
	
}

