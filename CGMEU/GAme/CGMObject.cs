//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.18444
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;

namespace CGM
{
	[Serializable]
	public abstract class CGMObject : MonoBehaviour, ISerializationCallbackReceiver
	{
//		public CGM.Resource[] Resources{
//			get{
//				return GetComponentsInChildren<CGM.Resource>();
//				
//				}
//			//set{;}
//		}

		public int ID;
		
		protected GameManager manager;
		
		[SerializeField]
		protected SerialNode node = new SerialNode();
		
		[SerializeField]
		protected List<SerialNode> resource_nodes = new List<SerialNode>();
		
		void Awake(){
			manager = FindObjectOfType<GameManager>();
			
		}
		
		protected virtual void Start(){
		
		}
		
		
		public virtual CGME.Actor GetCGMEActor(){
			return null;
		}
		
		public virtual CGME.Resource[] GetCGMEResources(){
			CGME.Actor act = GetCGMEActor ();
			if (act != null) 
				return act.Resources.ToArray();
			return null;
		} 
				
		public CGM.Resource[] GetChildrenResources(){
				List<CGM.Resource> res_list = new List<Resource>();
				
				for (int i = 0; i <transform.childCount; i++){
					CGM.Resource res = transform.GetChild (i).GetComponent<CGM.Resource>();
					if (res != null)
						res_list.Add(res);
				}
				
				return res_list.ToArray();
				
				//set{;}
		}
		
//		public CGM.Resource GetResource(int index){
//			return resources[index];
//		}
		
		
		//protected abstract void RegisterChildren();
		
//		protected void RegisterChildren(){
//		
//			for (int i = 0; i <transform.childCount; i++){
//				CGM.CGMObject obj = transform.GetChild (i).GetComponent<CGM.CGMObject>();
//				if (obj != null)
//					RegisterChild (obj);
//			}
//		}
		
//		protected abstract void RegisterChild(CGM.CGMObject obj);
		
		protected void RegisterResources(){

			for (int i = 0; i <transform.childCount; i++){
				CGM.Resource res = transform.GetChild (i).GetComponent<CGM.Resource>();
				if (res != null)
					RegisterResource (res);
			}
		}
		
		protected abstract void RegisterResource(CGM.Resource res);
		
		//protected abstract void Register(CGMObject parent);
		
		//protected abstract void RegisterResources();
		public abstract void SetObject(CGME.CGObject cgobj);
		protected abstract void SetListener();
		//void CGME.EngineListener.Act(CGME.EngineEvent ee, CGME.CGObject source, CGME.CGObject param1, CGME.CGObject param2);
		
		protected CGMObject AddChild(CGME.CGObject obj, string type){
			GameObject child = new GameObject (obj.CGType);
			child.AddComponent(type);
			child.SendMessage ("SetObject",obj);
			child.transform.parent = transform;
			//child.name = obj.Name;
			return child.GetComponent<CGMObject>();
		}
		
		protected virtual void RemoveChild(CGME.CGObject obj){
			
		}
				
		protected virtual void OnMouseDown(){
			ReportEvent(InterfaceEvent.Click);
		}
		
		protected virtual void OnMouseEnter(){
			ReportEvent(InterfaceEvent.MouseOver);
		} 
		
		protected virtual void OnMouseOver(){
			if (Input.GetMouseButton(1))
				ReportEvent(InterfaceEvent.PopUp);
			else if (Input.GetMouseButton(3))
				ReportEvent(InterfaceEvent.MouseWheel);
		}
//		
		
		
		protected void ReportEvent(InterfaceEvent ev){
			manager.ReportEvent(ev,this);
		}
		
	/*	protected void ForwardEvent(InterfaceEvent ev){
			
		}*/
		
		public virtual void Write(){
			return;
		}
		public virtual void Read(){
			return;
		}
		
		void ISerializationCallbackReceiver.OnBeforeSerialize()
		{
			//Debug.Log("Serializing " + this);
			if (node == null) node = new SerialNode();
			
			Write ();

		}
		
		void ISerializationCallbackReceiver.OnAfterDeserialize()
		{
			//Debug.Log("Deserializing " + this);
			if (node == null) return;
			
			Read ();
			
		}
		
		public virtual void Reposition(){
			transform.localPosition = Vector3.zero;
			
			//transform.position = transform.parent.position;
		}
		
		public void CopyResources(CGME.Actor act){
		
			CGM.Resource[] this_cgm_resources = GetChildrenResources();
			
			foreach (CGM.Resource this_cgm_resource in this_cgm_resources){
				this_cgm_resource.CopyFrom(act.Resources.ToArray());
			}
	
		}
		
		void Update(){
			
		}
		
		protected abstract void CleanUp();
		
		protected virtual void LateUpdate(){
			CleanUp ();
		}
		
		
		
	}
}

