//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.18408
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;

namespace CGM
{
	public class GameManager : MonoBehaviour, CGME.IEngineListener, CGME.IActionEventListener, ISerializationCallbackReceiver
	{
		private Camera cam;
		
		[SerializeField] private CGME.GameManager CGME_Manager;
		[SerializeField] private CGM.Game game_instance;
		[SerializeField] private List<CardTypeConfig> cardTypeConfigList = new List<CardTypeConfig>();
		[SerializeField] private LibNode lib_node = new LibNode();
		[SerializeField] private CGME.CGLibrary cgme_lib = new CGME.CGLibrary();
		
		[SerializeField] private List<ActionWrapper> actions = new List<ActionWrapper>();
		
		
		public CGM.Game GameInstance{
			get{return game_instance;}
			set{game_instance = value;}
		}
		
		public CGME.CGLibrary CGME_Lib{
			get{return cgme_lib;}
		}

		public List<CardTypeConfig> CardTypeConfigList {
			get { return cardTypeConfigList; }
			set { cardTypeConfigList = value; }
		}	
		
		public List<ActionWrapper> Actions {
			get {
				return actions;
			}
			set {
				actions = value;
			}
		}
		
		public string[] GetActionTypes(){
		
			string[] action_types = new string[actions.Count];
			
			int ind = 0	;
			foreach (ActionWrapper act in actions)
				action_types[ind++] = act.CGME_ActionRoot.CGType;
			
			return action_types;
		}
		
		
		#region Manager
			
		void Awake(){
					
			CGME_Manager = CGME.GameManager.GetInstance();
			
			CGME_Manager.AddEngineListener(this);
			CGME_Manager.AddActionEventListener(this);
			
			if (game_instance == null)
				game_instance = FindObjectOfType<CGM.Game>();
				
			Debug.Log ("Adding actions to action library");
			foreach (ActionWrapper act in Actions){
				cgme_lib.actionLibrary.Add (act.CGME_ActionRoot);
			}
			
			game_instance.Register(null);//,SendMessageOptions.DontRequireReceiver);
			
			cam = FindObjectOfType<Camera>();
			
//			foreach (Action act in GetChildrenActions()){
//				cgme_lib.actionLibrary.Add (act.CGME_ActionRoot);
//			}
			
			
		}
		
		void Start(){
			CGME_Manager.SetGame(game_instance.CGME_Game);
			
			CGME_Manager.Library = FindObjectOfType<GameManager>().CGME_Lib;
			
			//Debug.Log ("manager start players size: " + game_instance.CGME_Game.Players_Size);
			CGME_Manager.Start();
			
		}
				
		void Update(){
			CGME_Manager.Update ();
			
			UpdateMouse();
			
			
		}
		
		void CGME.IEngineListener.Act(CGME.EngineEvent ee, CGME.CGObject source, CGME.CGObject param1, CGME.CGObject param2){
			switch (ee){
			case CGME.EngineEvent.TransferChild: 
				TransferObjects(param1,param2);
				break;
				
			}
		}
		
		void CGME.IActionEventListener.ActEvent(CGME.CustomActionEvent action,  CGME.CGObject source, CGME.CGObject param1, CGME.CGObject param2){
			switch (action){
				case CGME.CustomActionEvent.FocusObject:
					if (param1 is CGME.Actor)
						FocusObject (param1 as CGME.Actor);
					else
						Debug.Log(param1.CGType + " cannot be focused on");
					break;
			}
		}
		
		void TransferObjects(CGME.CGObject target, CGME.CGObject destination ){
			
			CGMObject cgm_target = FindObject(target);
			CGMObject cgm_dest = FindObject (destination);
			
			if (cgm_target != null && cgm_dest != null){
				//Debug.Log ("Transfering");
				cgm_target.gameObject.transform.parent = cgm_dest.transform;
				cgm_dest.Reposition();
			}
			
		}
		
		CGM.CGMObject FindObject(CGME.CGObject cgme_obj){
			
			CGM.CGMObject[] cgm_obj_array = FindObjectsOfType<CGMObject>();
			
			foreach (CGMObject cgm_obj in cgm_obj_array)
				if (cgm_obj.ID == cgme_obj.Id) 
					return cgm_obj;
					
			return null;
			
		}
		
		void FocusObject(CGME.Actor act){
			GameObject[] focus_objects = GameObject.FindGameObjectsWithTag("CGMFocus");
			
			foreach (GameObject focus in focus_objects){
				CGMObject cgm_obj = focus.GetComponent<CGMObject>();
				if (cgm_obj != null)
					cgm_obj.CopyResources(act);
			}
		}
		
		//bool draw_popup = false;
		CGME.Actor popup_source = null;
		//Vector3 popup_position;

		CGME.ResourceAction[] popup_res_action_list = null;
		PopUpWindow popup_window = null;
		bool[] mouse = new bool[2];
		
		
		public void ReportEvent(InterfaceEvent ev, CGM.CGMObject source){
		
			if (popup_window != null) return;
		
			//Debug.Log (ev);
			if (ev == InterfaceEvent.PopUp){
				
				PopupEvent(source);
				return;
			}

			if ( ev == InterfaceEvent.Any || 
				 ev == InterfaceEvent.MouseOver || 
				(ev == InterfaceEvent.Click))
			{
				//Debug.Log (ev);
				StandardEvent(ev, source);
				return;
			}
		}
		
		private Resource[] GetResourcesFrom(CGMObject source){
			CGM.Resource[] resources = source.GetChildrenResources();
			
			if (resources == null){
				Debug.Log("No resources");
				return null;
			}
			
			return resources;
		}
		
		private void StandardEvent(InterfaceEvent ev, CGM.CGMObject source){
			
			CGM.Resource[] resources = GetResourcesFrom(source);
			CGME.Actor source_actor = source.GetCGMEActor();
			
			if (resources == null){ 
				return;
			}
						
			foreach (CGM.Resource res in resources){
				if (res.Trigger == ev &&
					res.CGME_Resource is CGME.ResourceAction &&
				    (!res.RestrictParent || (source_actor.Parent != null && res.ParentType == source_actor.Parent.CGType)))
				{	
					RunAction(res.CGME_Resource as CGME.ResourceAction, source_actor);	
				}
			}
		}
		
		private void PopupEvent(CGM.CGMObject source){
		
			//CGME.Resource[] cgme_resources = source.GetCGMEResources();
			CGM.Resource[] resources = GetResourcesFrom(source);
			CGME.Actor source_actor = source.GetCGMEActor();
			
			List<CGME.ResourceAction> res_actions = new List<CGME.ResourceAction>();
			foreach (Resource res in resources){
				if (res.CGME_Resource is CGME.ResourceAction && 
				    (res.CGME_Resource as CGME.ResourceAction).IsAvailable(CGME_Manager.Running_phase.Index) &&
				    (!res.RestrictParent || (source_actor.Parent != null && res.ParentType == source_actor.Parent.CGType)))
				{
					res_actions.Add(res.CGME_Resource  as CGME.ResourceAction);
				}
			}
			
			if (res_actions.Count <= 0){ 
				Debug.Log("No action resources available");
				return;
			}
			
			DrawPopup(source, Input.mousePosition,res_actions.ToArray());
		}
		
		private void DrawPopup(CGMObject psource, Vector3 position, CGME.ResourceAction[] action_list){
			
			popup_source = psource.GetCGMEActor();
			popup_res_action_list = action_list;
			
			string[] action_string_list = new string[action_list.Length];
			
			int i = 0;
			foreach (CGME.ResourceAction act in action_list){
				action_string_list[i++] = act.CGType;
			}
			
			popup_window = new PopUpWindow(action_string_list,position);

		}
		
		private void HidePopup(){
			//draw_popup = false;
			popup_source = null;
			popup_res_action_list = null;
			
			popup_window = null;
		}
		
		void RunAction(CGME.ResourceAction resact, CGME.Actor source){
			resact.RunAction(source, source);
			Debug.Log ("Running " + resact.Value.CGType);
		}
		
		void UpdateMouse(){
		
			mouse[0] = Input.GetMouseButton(0);
			mouse[1] = Input.GetMouseButton(1);	
			
			if ((mouse[0] || mouse[1])  && 
				popup_window != null &&
			   !popup_window.InsideBoundaries(Input.mousePosition)){
				
				HidePopup();	
			}
		
		}
		
		void OnGUI(){

			if (popup_window != null){
	
				int option = popup_window.Draw ();
				
				if (option != -1){ 
					//Debug.Log (option);				
					RunAction (popup_res_action_list[option],popup_source);
					HidePopup ();
				}
				
			}
	
		}
		
		#endregion
		// GAME LIBRARY -------------------------------------------------------------
		#region Library	
//		public CGM.Action[] GetChildrenActions(){
//			List<CGM.Action> act_list = new List<Action>();
//			
//			for (int i = 0; i <transform.childCount; i++){
//				CGM.Action act = transform.GetChild (i).GetComponent<CGM.Action>();
//				if (act != null)
//					act_list.Add(act);
//			}
//			
//			return act_list.ToArray();
//			
//			//set{;}
//		}
		
				
		
		
		#endregion
		
		#region Serialization
			
		void ISerializationCallbackReceiver.OnBeforeSerialize()
		{
			lib_node.Clear();
			
			foreach (CGME.Resource res in cgme_lib.resourceLibrary){
				SerialNode snode = new SerialNode();
				snode.type_string = res.GetType().FullName;
				snode.data = res.Write();
				
				lib_node.resources.Add(snode);
			}
			
			foreach (CGME.Card card in cgme_lib.CardsLibrary){
				SerialNode snode = new SerialNode();
				snode.type_string = card.GetType().FullName;
				snode.data = card.Write();
				
				lib_node.cards.Add(snode);
			}
			
			foreach (ActionWrapper action_wrapper in actions){
				if (action_wrapper != null)
					action_wrapper.OnBeforeSerialize();
			}
			
			
		}
		
		void ISerializationCallbackReceiver.OnAfterDeserialize()
		{
			//cgme_lib = CGME.CGLibrary.GetInstance();
			
			cgme_lib.resourceLibrary.Clear();
			
			foreach (SerialNode snode in lib_node.resources){
				CGME.Resource new_res = CGME.CGFactory.CreateCGInstance(snode.type_string) as CGME.Resource;
				
				new_res.Read (snode.data);
				
				cgme_lib.resourceLibrary.Add(new_res);
			}
			
			foreach (SerialNode snode in lib_node.cards){
				CGME.Card new_card = new CGME.Card();
				
				new_card.Read (snode.data);
				
				cgme_lib.CardsLibrary.Add(new_card);
			}
			
			foreach (ActionWrapper action_wrapper in actions){
				action_wrapper.OnAfterDeserialize();
			}
			
		}
		
		#endregion
		// ------------------------------------
	
		
					
		
	// EOF -----	
	}
}

