//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.18444
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;

namespace CGM
{
	
	[Serializable]
	public class Action : CGMObject, CGME.IEngineListener, ISerializationCallbackReceiver
	{
		[SerializeField]
		private CGME.ActionGroup CGME_action_root = new CGME.ActionGroup();
				
		[SerializeField]
		private int last_node_count = 0;
		
		[SerializeField]
		public List<SerialNode> serial_nodes = new List<SerialNode>();
		private bool SERIALIZE;
		
		//public CGME.ScriptableAction TEST_ACTION;
		
//		[SerializeField]
//		private InterfaceEvent trigger;
//		
//		public InterfaceEvent Trigger{
//			get{return trigger;}
//			set{trigger = value;}
//		}
		
		public CGME.ActionGroup CGME_ActionRoot{
			get {return CGME_action_root;}
			set {CGME_action_root = value;}
		}
		
		public CGME.Action GetAction(int index){
			return CGME_action_root.GetAction(index);
		}
		
		public CGME.Action AddAction(CGME.Action act){
			CGME_action_root.AddAction(act);
			return act;
		}
		
		public void RemoveAction(int index){
			//CGME_actions[index] = null;
			CGME_action_root.RemoveAction(index);
			//CGME_actions.RemoveAt(index);
		}
		
		public int ActionCount(){
			//return CGME_actions.Count;
			return CGME_action_root.Actions_Size;
		}
				
		public override void SetObject(CGME.CGObject cgobj){
			CGME_action_root = (CGME.ActionGroup) cgobj;
		}
		
		protected override void SetListener(){
			
			CGME_action_root.AddListener(this);
			
		}

		protected void Register(Phase phase){
			
			//RegisterResources ();
			
			phase.CGME_Phase.AddAction(CGME_action_root);
					
			SetListener();
			
		}
		
		protected override void RegisterResource (CGM.Resource res){
			return;
			//CGME_action_group.AddResource(res.CGME_Resource);
		}
		
		void CGME.IEngineListener.Act(CGME.EngineEvent ee, CGME.CGObject source, CGME.CGObject param1, CGME.CGObject param2){
			switch (ee){
			case CGME.EngineEvent.AddChild: 
				break;
			case CGME.EngineEvent.AddResource:
				AddChild (param1, "Resource");
				break;
				
			}
		}

		void ISerializationCallbackReceiver.OnBeforeSerialize()
		{
			//if (SERIALIZE){
			
				//Debug.Log ("Serializing Action");
		
				serial_nodes.Clear();
				
				// Serialize the root action
				SerialNode root_node = AddNode (CGME_action_root, null);
				
				// Serialize the root's children
				AddChildrenToSerializedNodes(CGME_action_root, root_node);
				
				SetSerialize(false);
			
			//}


		}
		
		public void SetSerialize(bool s){
			SERIALIZE = s;
			//Debug.Log ("SERIALIZE IS " + SERIALIZE);
		}
		
		void AddChildrenToSerializedNodes(CGME.ActionGroup parent_action, SerialNode parent_node)
		{	
			// Create a NODE for each ACTION CHILD and add them to the list
			// save the index of each CHILDREN NODE to the PARENT NODE
			foreach (CGME.Action child in parent_action.Children){
				//parent_node.children_indexes.Add(serial_nodes.Count);
				AddNode (child, parent_node);
			}
			
			// For every child that can have children (actiongroup),
			// call the funcion again sending its index
			int i = 0;
			foreach (CGME.Action child in parent_action.Children){
				int child_index = parent_node.children_indexes[i++];
				SerialNode child_node = serial_nodes[child_index];
				if (child is CGME.ActionGroup){
					AddChildrenToSerializedNodes (child as CGME.ActionGroup, child_node);
				}
				else if (child is CGME.ActionIfThenElse){
					//CGME.ActionIfThenElse child_ite = 
					AddChildrenToSerializedNodes (child as CGME.ActionIfThenElse, child_node);
				}
				//ind++;
				
			}	
		}
		
		void AddChildrenToSerializedNodes(CGME.ActionIfThenElse parent_action, SerialNode parent_node)
		{	
			// Create a NODE for each ACTION CHILD and add them to the list
			// save the index of each CHILDREN NODE to the PARENT NODE
			
			SerialNode if_node = AddNode (parent_action.GetIF(), parent_node);
			SerialNode then_node = AddNode (parent_action.GetTHEN(), parent_node);
			SerialNode else_node = AddNode (parent_action.GetELSE(), parent_node);
			
			// For every child that can have children (actiongroup),
			// call the funcion again sending its index
			
			AddChildrenToSerializedNodes(parent_action.GetIF(),if_node);
			AddChildrenToSerializedNodes(parent_action.GetTHEN(),then_node);
			AddChildrenToSerializedNodes(parent_action.GetELSE(),else_node);

		}
	
		
		public SerialNode AddNode(CGME.Action act, SerialNode parent_node){
			
			SerialNode serializedNode = new SerialNode();
			
			serializedNode.data = act.Write();
			serializedNode.type_string = act.GetType().ToString();
			serializedNode.index = serial_nodes.Count;
			
			if (parent_node != null)
				parent_node.children_indexes.Add(serial_nodes.Count);
				
			serial_nodes.Add(serializedNode);
			
			return serializedNode;
			//return serializedNode;
			
		}
	
		void ISerializationCallbackReceiver.OnAfterDeserialize()
		{
			CGME_action_root = InstantiateNodes() as CGME.ActionGroup;
		}
		
		void DebugNodes(){
			
			int i = 0;
			foreach (SerialNode node in serial_nodes){
			
				string log = "Index: " + i++ + " " + node.type_string + " [";
				
				foreach (int index in node.children_indexes){
					log+= index + " ";
				}
				log+= "]";
				Debug.Log (log);
			
			}
		
		}
		
		CGME.Action InstantiateNodes(){
			
			List<CGME.Action> actions = new List<CGME.Action>();

			
			//INSTANTIATE
			int i = 0;
			foreach (SerialNode node in serial_nodes){
			
				CGME.Action act = CGME.CGFactory.CreateCGInstance(node.type_string) as CGME.Action;
				act.Read(node.data);	

				
				actions.Add (act);
			}
			
			foreach (SerialNode node in serial_nodes){
				
				if (node.children_indexes.Count > 0){
					
					//Debug.Log ("3");
					
					if (actions[node.index] is CGME.ActionGroup){
						CGME.ActionGroup actiongroup = actions[node.index] as CGME.ActionGroup;
						
						foreach (int index in node.children_indexes){	
						//	Debug.Log ("4");
							actiongroup.AddAction(actions[index]);
						}
					}
					else if (actions[node.index] is CGME.ActionIfThenElse){
					
						CGME.ActionIfThenElse action_ite = actions[node.index] as CGME.ActionIfThenElse;
						
						action_ite.SetIF(actions[node.children_indexes[0]] as CGME.ActionGroup);
						action_ite.SetTHEN(actions[node.children_indexes[1]] as CGME.ActionGroup);
						action_ite.SetELSE(actions[node.children_indexes[2]] as CGME.ActionGroup);
					
					}

				}

			}
			
			
			if (actions.Count > 0)
				return actions[0];
				
			return null;
		}
		
		
		protected override void CleanUp(){
			if (CGME_action_root.Cleanup() == true){
				CGME_action_root = null;
				Destroy(gameObject);
			}		
		}
		
	}
}


