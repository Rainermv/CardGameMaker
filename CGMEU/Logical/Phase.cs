//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.18444
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;

namespace CGM
{
	[Serializable]
	public class Phase : CGMObject, CGME.IEngineListener
	{
		
		[SerializeField]
		public CGME.Phase CGME_phase = new CGME.Phase();
		
		[SerializeField]
		public List<int> action_sequence = new List<int>();
		
		public CGME.Phase CGME_Phase {
			get{return CGME_phase;}
			set{CGME_phase = value;}
		} 
		
		public override void SetObject(CGME.CGObject cgobj){
			CGME_Phase = (CGME.Phase) cgobj;
		}
		
		public override CGME.Actor GetCGMEActor(){
			return CGME_phase as CGME.Actor;
		}
		
		protected override void SetListener(){
			
			CGME_Phase.AddListener(this);
			
		}
		
		protected void Register(Game game){
			RegisterResources ();
			
			game.CGME_Game.AddPhase(CGME_phase);
			manager = FindObjectOfType<GameManager>();
			
//			for (int i = 0; i<transform.childCount; i++){
//				transform.GetChild(i).SendMessage("Register", this, SendMessageOptions.DontRequireReceiver);
//			}
			foreach (int action_index in action_sequence){
				CGME.ActionGroup new_action = new CGME.ActionGroup() ;
				
				//if (manager.Actions[action_index].CGME_ActionRoot == null) Debug.Log ("Action null");
				
				new_action.CopyFrom(manager.CGME_Lib.actionLibrary[action_index]);
				CGME_phase.AddAction(new_action);		
			}
									
			SetListener();
			
		}
		
		protected override void RegisterResource (CGM.Resource res){
			CGME_phase.AddResource(res.CGME_Resource);
		}
		
		void CGME.IEngineListener.Act(CGME.EngineEvent ee, CGME.CGObject source, CGME.CGObject param1, CGME.CGObject param2){
			switch (ee){
			case CGME.EngineEvent.SetId: 
				ID = param1.Id;
				break;
			case CGME.EngineEvent.AddChild: 
				AddChild (param1,"Action");
				break;
			case CGME.EngineEvent.AddResource:
				AddChild (param1, "Resource");
				break;
				
			}
		}
		
//		protected override void ReportEvent(CGME.InterfaceEvent ev){
//			//input_listener.ReportEvent(ev,CGME_phase);
//		}
		
		public override void Write(){
			if (CGME_Phase != null){
				node.type_string = CGME_Phase.GetType().ToString();
				node.data = CGME_Phase.Write();
			}
		}
		
		public override void Read(){
			
			if (node != null){
				CGME_Phase = new CGME.Phase();
				CGME_Phase.Read(node.data);
			}
			
		}
		
		protected override void CleanUp(){
			if (CGME_Phase.Cleanup() == true){
				CGME_Phase = null;
				Destroy(gameObject);
			}		
		}
	}
}

